{
  "version": 3,
  "sources": ["../../@loaders.gl/core/src/javascript-utils/is-type.ts", "../../@loaders.gl/core/src/lib/utils/mime-type-utils.ts", "../../@loaders.gl/core/src/lib/utils/resource-utils.ts", "../../@loaders.gl/core/src/lib/utils/response-utils.ts", "../../@loaders.gl/core/src/lib/fetch/fetch-file.ts", "../../@loaders.gl/core/src/lib/fetch/read-array-buffer.ts", "../../@loaders.gl/core/src/lib/fetch/read-file.ts", "../../@loaders.gl/core/src/lib/fetch/write-file.ts", "../../@probe.gl/env/src/lib/is-electron.ts", "../../@probe.gl/env/src/lib/is-browser.ts", "../../@probe.gl/env/src/lib/globals.ts", "../../@probe.gl/env/src/utils/globals.ts", "../../@probe.gl/env/src/lib/get-browser.ts", "../../@probe.gl/log/src/utils/local-storage.ts", "../../@probe.gl/log/src/utils/formatters.ts", "../../@probe.gl/log/src/utils/color.ts", "../../@probe.gl/log/src/utils/autobind.ts", "../../@probe.gl/log/src/utils/assert.ts", "../../@probe.gl/log/src/utils/hi-res-timestamp.ts", "../../@probe.gl/log/src/log.ts", "../../@probe.gl/log/src/init.js", "../../@probe.gl/log/src/index.ts", "../../@loaders.gl/core/src/lib/loader-utils/loggers.ts", "../../@loaders.gl/core/src/lib/loader-utils/option-defaults.ts", "../../@loaders.gl/core/src/lib/loader-utils/option-utils.ts", "../../@loaders.gl/core/src/lib/loader-utils/normalize-loader.ts", "../../@loaders.gl/core/src/lib/api/register-loaders.ts", "../../@loaders.gl/core/src/lib/utils/log.ts", "../../@loaders.gl/core/src/lib/api/select-loader.ts", "../../@loaders.gl/core/src/iterators/make-iterator/make-string-iterator.ts", "../../@loaders.gl/core/src/iterators/make-iterator/make-array-buffer-iterator.ts", "../../@loaders.gl/core/src/iterators/make-iterator/make-blob-iterator.ts", "../../@loaders.gl/core/src/iterators/make-iterator/make-stream-iterator.ts", "../../@loaders.gl/core/src/iterators/make-iterator/make-iterator.ts", "../../@loaders.gl/core/src/lib/loader-utils/get-data.ts", "../../@loaders.gl/core/src/lib/loader-utils/loader-context.ts", "../../@loaders.gl/core/src/lib/api/parse.ts", "../../@loaders.gl/core/src/lib/api/parse-sync.ts", "../../@loaders.gl/core/src/lib/api/parse-in-batches.ts", "../../@loaders.gl/core/src/lib/api/load.ts", "../../@loaders.gl/core/src/lib/api/load-in-batches.ts", "../../@loaders.gl/core/src/lib/api/encode.ts", "../../@loaders.gl/core/src/lib/api/save.ts", "../../@loaders.gl/core/src/iterators/make-stream/make-dom-stream.ts", "../../@loaders.gl/core/src/null-loader.ts", "../../@loaders.gl/core/src/lib/progress/fetch-progress.ts", "../../@loaders.gl/core/src/lib/filesystems/browser-filesystem.ts"],
  "sourcesContent": ["import type {Readable} from 'stream';\n\n/** A DOM or Node readable stream */\nexport type ReadableStreamType = ReadableStream | Readable;\n\nconst isBoolean: (x: any) => boolean = (x) => typeof x === 'boolean';\nconst isFunction: (x: any) => boolean = (x) => typeof x === 'function';\n\nexport const isObject: (x: any) => boolean = (x) => x !== null && typeof x === 'object';\nexport const isPureObject: (x: any) => boolean = (x) =>\n  isObject(x) && x.constructor === {}.constructor;\nexport const isPromise: (x: any) => boolean = (x) => isObject(x) && isFunction(x.then);\n\nexport const isIterable: (x: any) => boolean = (x) => x && typeof x[Symbol.iterator] === 'function';\nexport const isAsyncIterable: (x: any) => boolean = (x) =>\n  x && typeof x[Symbol.asyncIterator] === 'function';\nexport const isIterator: (x: any) => boolean = (x) => x && isFunction(x.next);\n\nexport const isResponse: (x: any) => boolean = (x) =>\n  (typeof Response !== 'undefined' && x instanceof Response) ||\n  (x && x.arrayBuffer && x.text && x.json);\n\nexport const isFile: (x: any) => boolean = (x) => typeof File !== 'undefined' && x instanceof File;\nexport const isBlob: (x: any) => boolean = (x) => typeof Blob !== 'undefined' && x instanceof Blob;\n\n/** Check for Node.js `Buffer` without triggering bundler to include buffer polyfill */\nexport const isBuffer: (x: any) => boolean = (x) => x && typeof x === 'object' && x.isBuffer;\n\nexport const isWritableDOMStream: (x: any) => boolean = (x) =>\n  isObject(x) && isFunction(x.abort) && isFunction(x.getWriter);\n\nexport const isReadableDOMStream: (x: any) => boolean = (x) =>\n  (typeof ReadableStream !== 'undefined' && x instanceof ReadableStream) ||\n  (isObject(x) && isFunction(x.tee) && isFunction(x.cancel) && isFunction(x.getReader));\n// Not implemented in Firefox: && isFunction(x.pipeTo)\n\nexport const isWritableNodeStream: (x: any) => boolean = (x) =>\n  isObject(x) && isFunction(x.end) && isFunction(x.write) && isBoolean(x.writable);\nexport const isReadableNodeStream: (x: any) => boolean = (x) =>\n  isObject(x) && isFunction(x.read) && isFunction(x.pipe) && isBoolean(x.readable);\nexport const isReadableStream: (x: any) => boolean = (x) =>\n  isReadableDOMStream(x) || isReadableNodeStream(x);\nexport const isWritableStream: (x: any) => boolean = (x) =>\n  isWritableDOMStream(x) || isWritableNodeStream(x);\n", "// TODO - build/integrate proper MIME type parsing\n// https://mimesniff.spec.whatwg.org/\n\nconst DATA_URL_PATTERN = /^data:([-\\w.]+\\/[-\\w.+]+)(;|,)/;\nconst MIME_TYPE_PATTERN = /^([-\\w.]+\\/[-\\w.+]+)/;\n\n/**\n * Remove extra data like `charset` from MIME types\n * @param mimeString\n * @returns A clean MIME type, or an empty string\n *\n * @todo - handle more advanced MIMETYpes, multiple types\n * @todo - extract charset etc\n */\nexport function parseMIMEType(mimeString: string): string {\n  // If resource is a data url, extract any embedded mime type\n  const matches = MIME_TYPE_PATTERN.exec(mimeString);\n  if (matches) {\n    return matches[1];\n  }\n  return mimeString;\n}\n\n/**\n * Extract MIME type from data URL\n *\n * @param mimeString\n * @returns A clean MIME type, or an empty string\n *\n * @todo - handle more advanced MIMETYpes, multiple types\n * @todo - extract charset etc\n */\nexport function parseMIMETypeFromURL(url: string): string {\n  // If resource is a data URL, extract any embedded mime type\n  const matches = DATA_URL_PATTERN.exec(url);\n  if (matches) {\n    return matches[1];\n  }\n  return '';\n}\n", "import {isResponse, isBlob} from '../../javascript-utils/is-type';\nimport {parseMIMEType, parseMIMETypeFromURL} from './mime-type-utils';\n\nconst QUERY_STRING_PATTERN = /\\?.*/;\n\n/**\n * Returns an object with `url` and (MIME) `type` fields\n * If it cannot determine url or type, the corresponding value will be an empty string\n *\n * @param resource Any type, but only Responses, string URLs and data URLs are processed\n *\n * @todo string parameters are assumed to be URLs\n */\nexport function getResourceUrlAndType(resource: any): {url: string; type: string} {\n  // If resource is a response, it contains the information directly\n  if (isResponse(resource)) {\n    const url = stripQueryString(resource.url || '');\n    const contentTypeHeader = resource.headers.get('content-type') || '';\n    return {\n      url,\n      type: parseMIMEType(contentTypeHeader) || parseMIMETypeFromURL(url)\n    };\n  }\n\n  // If the resource is a Blob or a File (subclass of Blob)\n  if (isBlob(resource)) {\n    return {\n      // File objects have a \"name\" property. Blob objects don't have any\n      // url (name) information\n      url: stripQueryString(resource.name || ''),\n      type: resource.type || ''\n    };\n  }\n\n  if (typeof resource === 'string') {\n    return {\n      // TODO this could mess up data URL but it doesn't matter as it is just used for inference\n      url: stripQueryString(resource),\n      // If a data url\n      type: parseMIMETypeFromURL(resource)\n    };\n  }\n\n  // Unknown\n  return {\n    url: '',\n    type: ''\n  };\n}\n\n/**\n  * Returns (approximate) content length for a resource if it can be determined.\n  * Returns -1 if content length cannot be determined.\n  * @param resource\n\n  * @note string parameters are NOT assumed to be URLs\n  */\nexport function getResourceContentLength(resource: any): number {\n  if (isResponse(resource)) {\n    return resource.headers['content-length'] || -1;\n  }\n  if (isBlob(resource)) {\n    return resource.size;\n  }\n  if (typeof resource === 'string') {\n    // TODO - handle data URL?\n    return resource.length;\n  }\n  if (resource instanceof ArrayBuffer) {\n    return resource.byteLength;\n  }\n  if (ArrayBuffer.isView(resource)) {\n    return resource.byteLength;\n  }\n  return -1;\n}\n\nfunction stripQueryString(url) {\n  return url.replace(QUERY_STRING_PATTERN, '');\n}\n", "import {isResponse} from '../../javascript-utils/is-type';\nimport {getResourceContentLength, getResourceUrlAndType} from './resource-utils';\n\n/**\n * Returns a Response object\n * Adds content-length header when possible\n *\n * @param resource\n */\nexport async function makeResponse(resource: any): Promise<Response> {\n  if (isResponse(resource)) {\n    return resource;\n  }\n\n  // Add content-length header if possible\n  const headers: {[header: string]: string} = {};\n\n  const contentLength = getResourceContentLength(resource);\n  if (contentLength >= 0) {\n    headers['content-length'] = String(contentLength);\n  }\n\n  // `new Response(File)` does not preserve content-type and URL\n  // so we add them here\n  const {url, type} = getResourceUrlAndType(resource);\n  if (type) {\n    headers['content-type'] = type;\n  }\n\n  // Add a custom header with initial bytes if available\n  const initialDataUrl = await getInitialDataUrl(resource);\n  if (initialDataUrl) {\n    headers['x-first-bytes'] = initialDataUrl;\n  }\n\n  // TODO - is this the best way of handling strings?\n  // Maybe package as data URL instead?\n  if (typeof resource === 'string') {\n    // Convert to ArrayBuffer to avoid Response treating it as a URL\n    resource = new TextEncoder().encode(resource);\n  }\n\n  // Attempt to create a Response from the resource, adding headers and setting url\n  const response = new Response(resource, {headers});\n  // We can't control `Response.url` via constructor, use a property override to record URL.\n  Object.defineProperty(response, 'url', {value: url});\n  return response;\n}\n\n/**\n * Checks response status (async) and throws a helpful error message if status is not OK.\n * @param response\n */\nexport async function checkResponse(response: Response): Promise<void> {\n  if (!response.ok) {\n    const message = await getResponseError(response);\n    throw new Error(message);\n  }\n}\n\n/**\n * Checks response status (sync) and throws a helpful error message if status is not OK.\n * @param response\n */\nexport function checkResponseSync(response: Response): void {\n  if (!response.ok) {\n    let message = `${response.status} ${response.statusText}`;\n    message = message.length > 60 ? `${message.slice(0, 60)}...` : message;\n    throw new Error(message);\n  }\n}\n\n// HELPERS\n\nasync function getResponseError(response): Promise<string> {\n  let message = `Failed to fetch resource ${response.url} (${response.status}): `;\n  try {\n    const contentType = response.headers.get('Content-Type');\n    let text = response.statusText;\n    if (contentType.includes('application/json')) {\n      text += ` ${await response.text()}`;\n    }\n    message += text;\n    message = message.length > 60 ? `${message.slice(0, 60)}...` : message;\n  } catch (error) {\n    // eslint forbids return in a finally statement, so we just catch here\n  }\n  return message;\n}\n\nasync function getInitialDataUrl(resource): Promise<string | null> {\n  const INITIAL_DATA_LENGTH = 5;\n  if (typeof resource === 'string') {\n    return `data:,${resource.slice(0, INITIAL_DATA_LENGTH)}`;\n  }\n  if (resource instanceof Blob) {\n    const blobSlice = resource.slice(0, 5);\n    return await new Promise((resolve) => {\n      const reader = new FileReader();\n      reader.onload = (event) => resolve(event?.target?.result as string);\n      reader.readAsDataURL(blobSlice);\n    });\n  }\n  if (resource instanceof ArrayBuffer) {\n    const slice = resource.slice(0, INITIAL_DATA_LENGTH);\n    const base64 = arrayBufferToBase64(slice);\n    return `data:base64,${base64}`;\n  }\n  return null;\n}\n\n// https://stackoverflow.com/questions/9267899/arraybuffer-to-base64-encoded-string\nfunction arrayBufferToBase64(buffer) {\n  let binary = '';\n  const bytes = new Uint8Array(buffer);\n  for (let i = 0; i < bytes.byteLength; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return btoa(binary);\n}\n", "import {resolvePath} from '@loaders.gl/loader-utils';\nimport {makeResponse} from '../utils/response-utils';\n// import {getErrorMessageFromResponse} from './fetch-error-message';\n\n/**\n * fetch compatible function\n * Reads file data from:\n * - http/http urls\n * - data urls\n * - File/Blob objects\n * Leverages `@loaders.gl/polyfills` for Node.js support\n * Respects pathPrefix and file aliases\n */\nexport async function fetchFile(\n  url: string | Blob,\n  options?: RequestInit & {fetch?: RequestInit | Function}\n): Promise<Response> {\n  if (typeof url === 'string') {\n    url = resolvePath(url);\n\n    let fetchOptions: RequestInit = options as RequestInit;\n    if (options?.fetch && typeof options?.fetch !== 'function') {\n      fetchOptions = options.fetch;\n    }\n\n    return await fetch(url, fetchOptions);\n  }\n\n  return await makeResponse(url);\n}\n", "//\nimport {fs} from '@loaders.gl/loader-utils';\n\n/**\n * Reads a chunk from a random access file\n * @param file\n * @param start\n * @param length\n * @returns\n */\nexport async function readArrayBuffer(\n  file: Blob | ArrayBuffer | string | number,\n  start: number,\n  length: number\n): Promise<ArrayBuffer> {\n  if (typeof file === 'number') {\n    return await fs._readToArrayBuffer(file, start, length);\n  }\n  // TODO - we can do better for ArrayBuffer and string\n  if (!(file instanceof Blob)) {\n    file = new Blob([file]);\n  }\n  const slice = file.slice(start, start + length);\n  return await readBlob(slice);\n}\n\n/**\n * Read a slice of a Blob or File, without loading the entire file into memory\n * The trick when reading File objects is to read successive \"slices\" of the File\n * Per spec https://w3c.github.io/FileAPI/, slicing a File only updates the start and end fields\n * Actually reading from file happens in `readAsArrayBuffer`\n * @param blob to read\n */\nexport async function readBlob(blob: Blob): Promise<ArrayBuffer> {\n  return await new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = (event: ProgressEvent<FileReader>) =>\n      resolve(event?.target?.result as ArrayBuffer);\n    // TODO - reject with a proper Error\n    fileReader.onerror = (error: ProgressEvent<FileReader>) => reject(error);\n    fileReader.readAsArrayBuffer(blob);\n  });\n}\n", "// File read\nimport {isBrowser, resolvePath, fs, toArrayBuffer} from '@loaders.gl/loader-utils';\nimport {assert} from '@loaders.gl/loader-utils';\n\n// TODO - this is not tested\n// const isDataURL = (url) => url.startsWith('data:');\n\n/**\n * In a few cases (data URIs, node.js) \"files\" can be read synchronously\n */\nexport function readFileSync(url: string, options: object = {}) {\n  url = resolvePath(url);\n\n  // Only support this if we can also support sync data URL decoding in browser\n  // if (isDataURL(url)) {\n  //   return decodeDataUri(url);\n  // }\n\n  if (!isBrowser) {\n    const buffer = fs.readFileSync(url, options);\n    return typeof buffer !== 'string' ? toArrayBuffer(buffer) : buffer;\n  }\n\n  // @ts-ignore\n  if (!options.nothrow) {\n    // throw new Error('Cant load URI synchronously');\n    assert(false);\n  }\n\n  return null;\n}\n", "// file write\nimport {isBrowser, assert, resolvePath} from '@loaders.gl/loader-utils';\nimport {fs, toBuffer} from '@loaders.gl/loader-utils';\n\nexport async function writeFile(\n  filePath: string,\n  arrayBufferOrString: ArrayBuffer | string,\n  options?\n): Promise<void> {\n  filePath = resolvePath(filePath);\n  if (!isBrowser) {\n    await fs.writeFile(filePath, toBuffer(arrayBufferOrString), {flag: 'w'});\n  }\n  assert(false);\n}\n\nexport function writeFileSync(\n  filePath: string,\n  arrayBufferOrString: ArrayBuffer | string,\n  options?\n): void {\n  filePath = resolvePath(filePath);\n  if (!isBrowser) {\n    fs.writeFileSync(filePath, toBuffer(arrayBufferOrString), {flag: 'w'});\n  }\n  assert(false);\n}\n", "// based on https://github.com/cheton/is-electron\n// https://github.com/electron/electron/issues/2288\n/* eslint-disable complexity */\nexport default function isElectron(mockUserAgent?: string): boolean {\n  // Renderer process\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.process === 'object' &&\n    // @ts-expect-error\n    window.process.type === 'renderer'\n  ) {\n    return true;\n  }\n  // Main process\n  if (\n    typeof process !== 'undefined' &&\n    typeof process.versions === 'object' &&\n    // eslint-disable-next-line\n    Boolean(process.versions['electron'])\n  ) {\n    return true;\n  }\n  // Detect the user agent when the `nodeIntegration` option is set to true\n  const realUserAgent =\n    typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent;\n  const userAgent = mockUserAgent || realUserAgent;\n  if (userAgent && userAgent.indexOf('Electron') >= 0) {\n    return true;\n  }\n  return false;\n}\n", "// This function is needed in initialization stages,\n// make sure it can be imported in isolation\n\nimport isElectron from './is-electron';\n\nexport default function isBrowser(): boolean {\n  // Check if in browser by duck-typing Node context\n  const isNode =\n    // @ts-expect-error\n    typeof process === 'object' && String(process) === '[object process]' && !process.browser;\n\n  return !isNode || isElectron();\n}\n\n// document does not exist on worker thread\nexport function isBrowserMainThread(): boolean {\n  return isBrowser() && typeof document !== 'undefined';\n}\n", "/* eslint-disable no-restricted-globals */\nconst globals = {\n  self: typeof self !== 'undefined' && self,\n  window: typeof window !== 'undefined' && window,\n  global: typeof global !== 'undefined' && global,\n  document: typeof document !== 'undefined' && document,\n  process: typeof process === 'object' && process\n};\n\nconst global_ = globalThis;\nconst self_ = globals.self || globals.window || globals.global;\nconst window_ = globals.window || globals.self || globals.global;\nconst document_ = globals.document || {};\nconst process_ = globals.process || {};\nconst console_ = console;\n\nexport {\n  self_ as self,\n  window_ as window,\n  global_ as global,\n  document_ as document,\n  process_ as process,\n  console_ as console\n};\n", "import checkIfBrowser from '../lib/is-browser';\n\nexport {self, window, global, document, process, console} from '../lib/globals';\n\n// Extract injected version from package.json (injected by babel plugin)\n// @ts-expect-error\nexport const VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'untranspiled source';\n\nexport const isBrowser = checkIfBrowser();\n", "// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// This function is needed in initialization stages,\n// make sure it can be imported in isolation\n\nimport isBrowser from './is-browser';\nimport isElectron from './is-electron';\n\nconst window = globalThis;\n\nexport function isMobile(): boolean {\n  return typeof window.orientation !== 'undefined';\n}\n\n// Simple browser detection\n// `mockUserAgent` parameter allows user agent to be overridden for testing\n/* eslint-disable complexity */\nexport default function getBrowser(\n  mockUserAgent?: string\n): 'Node' | 'Electron' | 'Chrome' | 'Firefox' | 'Safari' | 'Edge' | 'IE' | 'Unknown' {\n  if (!mockUserAgent && !isBrowser()) {\n    return 'Node';\n  }\n\n  if (isElectron(mockUserAgent)) {\n    return 'Electron';\n  }\n\n  const navigator_ = typeof navigator !== 'undefined' ? navigator : {};\n  // @ts-expect-error\n  const userAgent = mockUserAgent || navigator_.userAgent || '';\n  // const appVersion = navigator_.appVersion || '';\n\n  // NOTE: Order of tests matter, as many agents list Chrome etc.\n  if (userAgent.indexOf('Edge') > -1) {\n    return 'Edge';\n  }\n  const isMSIE = userAgent.indexOf('MSIE ') !== -1;\n  const isTrident = userAgent.indexOf('Trident/') !== -1;\n  if (isMSIE || isTrident) {\n    return 'IE';\n  }\n  if (window.chrome) {\n    return 'Chrome';\n  }\n  if (window.safari) {\n    return 'Safari';\n  }\n  if (window.mozInnerScreenX) {\n    return 'Firefox';\n  }\n  return 'Unknown';\n}\n", "// probe.gl, MIT license\n\nfunction getStorage(type): Storage {\n  try {\n    // @ts-expect-error\n    const storage: Storage = window[type];\n    const x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return storage;\n  } catch (e) {\n    return null;\n  }\n}\n\n// Store keys in local storage via simple interface\nexport class LocalStorage<Configuration extends {}> {\n  storage: Storage;\n  id: string;\n  config: Required<Configuration>;\n\n  constructor(id: string, defaultConfig: Required<Configuration>, type = 'sessionStorage') {\n    this.storage = getStorage(type);\n    this.id = id;\n    this.config = defaultConfig;\n    this._loadConfiguration();\n  }\n\n  getConfiguration(): Required<Configuration> {\n    return this.config;\n  }\n\n  setConfiguration(configuration: Configuration): void {\n    Object.assign(this.config, configuration);\n    if (this.storage) {\n      const serialized = JSON.stringify(this.config);\n      this.storage.setItem(this.id, serialized);\n    }\n  }\n\n  // Get config from persistent store, if available\n  _loadConfiguration() {\n    let configuration = {};\n    if (this.storage) {\n      const serializedConfiguration = this.storage.getItem(this.id);\n      configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};\n    }\n    Object.assign(this.config, configuration);\n    return this;\n  }\n}\n", "// TODO: Currently unused, keeping in case we want it later for log formatting\nexport function formatTime(ms: number): string {\n  let formatted;\n  if (ms < 10) {\n    formatted = `${ms.toFixed(2)}ms`;\n  } else if (ms < 100) {\n    formatted = `${ms.toFixed(1)}ms`;\n  } else if (ms < 1000) {\n    formatted = `${ms.toFixed(0)}ms`;\n  } else {\n    formatted = `${(ms / 1000).toFixed(2)}s`;\n  }\n  return formatted;\n}\n\nexport function leftPad(string: string, length: number = 8): string {\n  const padLength = Math.max(length - string.length, 0);\n  return `${' '.repeat(padLength)}${string}`;\n}\n\nexport function rightPad(string: string, length: number = 8): string {\n  const padLength = Math.max(length - string.length, 0);\n  return `${string}${' '.repeat(padLength)}`;\n}\n\nexport function formatValue(v: unknown, opts: {isInteger?: boolean} = {}): string {\n  const EPSILON = 1e-16;\n  const {isInteger = false} = opts;\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, opts);\n  }\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n  // @ts-expect-error\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n  if (isInteger) {\n    // @ts-expect-error\n    return v.toFixed(0);\n  }\n  // @ts-expect-error\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    // @ts-expect-error\n    return v.toFixed(0);\n  }\n  // @ts-expect-error\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\n\n/** Helper to formatValue */\nfunction formatArrayValue(v, opts) {\n  const {maxElts = 16, size = 1} = opts;\n  let string = '[';\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += `,${i % size === 0 ? ' ' : ''}`;\n    }\n    string += formatValue(v[i], opts);\n  }\n  const terminator = v.length > maxElts ? '...' : ']';\n  return `${string}${terminator}`;\n}\n\n/** Inspired by https://github.com/hughsk/console-image (MIT license) */\nexport function formatImage(image, message, scale, maxWidth = 600) {\n  const imageUrl = image.src.replace(/\\(/g, '%28').replace(/\\)/g, '%29');\n\n  if (image.width > maxWidth) {\n    scale = Math.min(scale, maxWidth / image.width);\n  }\n\n  const width = image.width * scale;\n  const height = image.height * scale;\n\n  const style = [\n    'font-size:1px;',\n    `padding:${Math.floor(height / 2)}px ${Math.floor(width / 2)}px;`,\n    `line-height:${height}px;`,\n    `background:url(${imageUrl});`,\n    `background-size:${width}px ${height}px;`,\n    'color:transparent;'\n  ].join('');\n\n  return [`${message} %c+`, style];\n}\n", "import {isBrowser} from '@probe.gl/env';\n\nexport enum COLOR {\n  BLACK = 30,\n  RED = 31,\n  GREEN = 32,\n  YELLOW = 33,\n  BLUE = 34,\n  MAGENTA = 35,\n  CYAN = 36,\n  WHITE = 37,\n\n  BRIGHT_BLACK = 90,\n  BRIGHT_RED = 91,\n  BRIGHT_GREEN = 92,\n  BRIGHT_YELLOW = 93,\n  BRIGHT_BLUE = 94,\n  BRIGHT_MAGENTA = 95,\n  BRIGHT_CYAN = 96,\n  BRIGHT_WHITE = 97\n}\n\nfunction getColor(color): number {\n  return typeof color === 'string' ? COLOR[color.toUpperCase()] || COLOR.WHITE : color;\n}\n\nexport function addColor(string, color, background?): string {\n  if (!isBrowser && typeof string === 'string') {\n    if (color) {\n      color = getColor(color);\n      string = `\\u001b[${color}m${string}\\u001b[39m`;\n    }\n    if (background) {\n      // background colors values are +10\n      color = getColor(background);\n      string = `\\u001b[${background + 10}m${string}\\u001b[49m`;\n    }\n  }\n  return string;\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * Binds the \"this\" argument of all functions on a class instance to the instance\n * @param obj - class instance (typically a react component)\n */\nexport function autobind(obj: object, predefined = ['constructor']): void {\n  const proto = Object.getPrototypeOf(obj);\n  const propNames = Object.getOwnPropertyNames(proto);\n  for (const key of propNames) {\n    if (typeof obj[key] === 'function') {\n      if (!predefined.find(name => key === name)) {\n        obj[key] = obj[key].bind(obj);\n      }\n    }\n  }\n}\n", "export default function assert(condition: unknown, message?: string): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n", "// probe.gl, MIT license\n\nimport {window, process, isBrowser} from '@probe.gl/env';\n\n/** Get best timer available. */\nexport function getHiResTimestamp() {\n  let timestamp;\n  if (isBrowser && 'performance' in window) {\n    timestamp = window?.performance?.now?.();\n  } else if ('hrtime' in process) {\n    // @ts-ignore\n    const timeParts = process?.hrtime?.();\n    timestamp = timeParts[0] * 1000 + timeParts[1] / 1e6;\n  } else {\n    timestamp = Date.now();\n  }\n\n  return timestamp;\n}\n", "// probe.gl, MIT license\n\n/* eslint-disable no-console */\nimport {VERSION, isBrowser} from '@probe.gl/env';\nimport {LocalStorage} from './utils/local-storage';\nimport {formatImage, formatTime, leftPad} from './utils/formatters';\nimport {addColor} from './utils/color';\nimport {autobind} from './utils/autobind';\nimport assert from './utils/assert';\nimport {getHiResTimestamp} from './utils/hi-res-timestamp';\n\n// Instrumentation in other packages may override console methods, so preserve them here\nconst originalConsole = {\n  debug: isBrowser ? console.debug || console.log : console.log,\n  log: console.log,\n  info: console.info,\n  warn: console.warn,\n  error: console.error\n};\n\ntype Table = Record<string, any>;\n\ntype LogFunction = () => void;\n\ntype LogOptions = {\n  method?;\n  time?;\n  total?: number;\n  delta?: number;\n  tag?: string;\n  message?: string;\n  once?: boolean;\n  nothrottle?: boolean;\n  args?: any;\n};\n\ntype LogSettings = {\n  enabled?: boolean;\n  level?: number;\n  [key: string]: any;\n};\n\nconst DEFAULT_SETTINGS: Required<LogSettings> = {\n  enabled: true,\n  level: 0\n};\n\nfunction noop() {} // eslint-disable-line @typescript-eslint/no-empty-function\n\nconst cache = {};\nconst ONCE = {once: true};\n\ntype LogConfiguration = {\n  enabled?: boolean;\n  level?: number;\n};\n\n/** A console wrapper */\n\nexport class Log {\n  static VERSION = VERSION;\n\n  id: string;\n  VERSION: string = VERSION;\n  _startTs: number = getHiResTimestamp();\n  _deltaTs: number = getHiResTimestamp();\n  _storage: LocalStorage<LogConfiguration>;\n  userData = {};\n\n  // TODO - fix support from throttling groups\n  LOG_THROTTLE_TIMEOUT: number = 0; // Time before throttled messages are logged again\n\n  constructor({id} = {id: ''}) {\n    this.id = id;\n    this.userData = {};\n    this._storage = new LocalStorage<LogConfiguration>(`__probe-${this.id}__`, DEFAULT_SETTINGS);\n\n    this.timeStamp(`${this.id} started`);\n\n    autobind(this);\n    Object.seal(this);\n  }\n\n  set level(newLevel: number) {\n    this.setLevel(newLevel);\n  }\n\n  get level(): number {\n    return this.getLevel();\n  }\n\n  isEnabled(): boolean {\n    return this._storage.config.enabled;\n  }\n\n  getLevel(): number {\n    return this._storage.config.level;\n  }\n\n  /** @return milliseconds, with fractions */\n  getTotal(): number {\n    return Number((getHiResTimestamp() - this._startTs).toPrecision(10));\n  }\n\n  /** @return milliseconds, with fractions */\n  getDelta(): number {\n    return Number((getHiResTimestamp() - this._deltaTs).toPrecision(10));\n  }\n\n  /** @deprecated use logLevel */\n  set priority(newPriority: number) {\n    this.level = newPriority;\n  }\n\n  /** @deprecated use logLevel */\n  get priority(): number {\n    return this.level;\n  }\n\n  /** @deprecated use logLevel */\n  getPriority(): number {\n    return this.level;\n  }\n\n  // Configure\n\n  enable(enabled: boolean = true): this {\n    this._storage.setConfiguration({enabled});\n    return this;\n  }\n\n  setLevel(level: number): this {\n    this._storage.setConfiguration({level});\n    return this;\n  }\n\n  /** return the current status of the setting */\n  get(setting: string): any {\n    return this._storage.config[setting];\n  }\n\n  // update the status of the setting\n  set(setting: string, value: any): void {\n    this._storage.setConfiguration({[setting]: value});\n  }\n\n  /** Logs the current settings as a table */\n  settings(): void {\n    if (console.table) {\n      console.table(this._storage.config);\n    } else {\n      console.log(this._storage.config);\n    }\n  }\n\n  // Unconditional logging\n\n  assert(condition: unknown, message?: string): asserts condition {\n    assert(condition, message);\n  }\n\n  /** Warn, but only once, no console flooding */\n  warn(message: string, ...args): LogFunction;\n  warn(message: string): LogFunction {\n    return this._getLogFunction(0, message, originalConsole.warn, arguments, ONCE);\n  }\n\n  /** Print an error */\n  error(message: string, ...args): LogFunction;\n  error(message: string): LogFunction {\n    return this._getLogFunction(0, message, originalConsole.error, arguments);\n  }\n\n  /** Print a deprecation warning */\n  deprecated(oldUsage: string, newUsage: string): LogFunction {\n    return this.warn(`\\`${oldUsage}\\` is deprecated and will be removed \\\nin a later version. Use \\`${newUsage}\\` instead`);\n  }\n\n  /** Print a removal warning */\n  removed(oldUsage: string, newUsage: string): LogFunction {\n    return this.error(`\\`${oldUsage}\\` has been removed. Use \\`${newUsage}\\` instead`);\n  }\n\n  // Conditional logging\n\n  /** Log to a group */\n  probe(logLevel, message?, ...args): LogFunction;\n  probe(logLevel, message?): LogFunction {\n    return this._getLogFunction(logLevel, message, originalConsole.log, arguments, {\n      time: true,\n      once: true\n    });\n  }\n\n  /** Log a debug message */\n  log(logLevel, message?, ...args): LogFunction;\n  log(logLevel, message?): LogFunction {\n    return this._getLogFunction(logLevel, message, originalConsole.debug, arguments);\n  }\n\n  /** Log a normal message */\n  info(logLevel, message?, ...args): LogFunction;\n  info(logLevel, message?): LogFunction {\n    return this._getLogFunction(logLevel, message, console.info, arguments);\n  }\n\n  /** Log a normal message, but only once, no console flooding */\n  once(logLevel, message?, ...args): LogFunction;\n  once(logLevel, message?, ...args) {\n    return this._getLogFunction(\n      logLevel,\n      message,\n      originalConsole.debug || originalConsole.info,\n      arguments,\n      ONCE\n    );\n  }\n\n  /** Logs an object as a table */\n  table(logLevel, table?, columns?): LogFunction {\n    if (table) {\n      // @ts-expect-error Not clear how this works, columns being passed as arguments\n      return this._getLogFunction(logLevel, table, console.table || noop, columns && [columns], {\n        tag: getTableHeader(table)\n      });\n    }\n    return noop;\n  }\n\n  /** logs an image under Chrome */\n  image({logLevel, priority, image, message = '', scale = 1}): LogFunction {\n    if (!this._shouldLog(logLevel || priority)) {\n      return noop;\n    }\n    return isBrowser\n      ? logImageInBrowser({image, message, scale})\n      : logImageInNode({image, message, scale});\n  }\n\n  time(logLevel, message) {\n    return this._getLogFunction(logLevel, message, console.time ? console.time : console.info);\n  }\n\n  timeEnd(logLevel, message) {\n    return this._getLogFunction(\n      logLevel,\n      message,\n      console.timeEnd ? console.timeEnd : console.info\n    );\n  }\n\n  timeStamp(logLevel, message?) {\n    return this._getLogFunction(logLevel, message, console.timeStamp || noop);\n  }\n\n  group(logLevel, message, opts = {collapsed: false}) {\n    const options = normalizeArguments({logLevel, message, opts});\n    const {collapsed} = opts;\n    // @ts-expect-error\n    options.method = (collapsed ? console.groupCollapsed : console.group) || console.info;\n\n    return this._getLogFunction(options);\n  }\n\n  groupCollapsed(logLevel, message, opts = {}) {\n    return this.group(logLevel, message, Object.assign({}, opts, {collapsed: true}));\n  }\n\n  groupEnd(logLevel) {\n    return this._getLogFunction(logLevel, '', console.groupEnd || noop);\n  }\n\n  // EXPERIMENTAL\n\n  withGroup(logLevel: number, message: string, func: Function): void {\n    this.group(logLevel, message)();\n\n    try {\n      func();\n    } finally {\n      this.groupEnd(logLevel)();\n    }\n  }\n\n  trace(): void {\n    if (console.trace) {\n      console.trace();\n    }\n  }\n\n  // PRIVATE METHODS\n\n  /** Deduces log level from a variety of arguments */\n  _shouldLog(logLevel: unknown): boolean {\n    return this.isEnabled() && this.getLevel() >= normalizeLogLevel(logLevel);\n  }\n\n  _getLogFunction(\n    logLevel: unknown,\n    message?: unknown,\n    method?: Function,\n    args?: IArguments,\n    opts?: LogOptions\n  ): LogFunction {\n    if (this._shouldLog(logLevel)) {\n      // normalized opts + timings\n      opts = normalizeArguments({logLevel, message, args, opts});\n      method = method || opts.method;\n      assert(method);\n\n      opts.total = this.getTotal();\n      opts.delta = this.getDelta();\n      // reset delta timer\n      this._deltaTs = getHiResTimestamp();\n\n      const tag = opts.tag || opts.message;\n\n      if (opts.once) {\n        if (!cache[tag]) {\n          cache[tag] = getHiResTimestamp();\n        } else {\n          return noop;\n        }\n      }\n\n      // TODO - Make throttling work with groups\n      // if (opts.nothrottle || !throttle(tag, this.LOG_THROTTLE_TIMEOUT)) {\n      //   return noop;\n      // }\n\n      message = decorateMessage(this.id, opts.message, opts);\n\n      // Bind console function so that it can be called after being returned\n      return method.bind(console, message, ...opts.args);\n    }\n    return noop;\n  }\n}\n\n/**\n * Get logLevel from first argument:\n * - log(logLevel, message, args) => logLevel\n * - log(message, args) => 0\n * - log({logLevel, ...}, message, args) => logLevel\n * - log({logLevel, message, args}) => logLevel\n */\nfunction normalizeLogLevel(logLevel: unknown): number {\n  if (!logLevel) {\n    return 0;\n  }\n  let resolvedLevel;\n\n  switch (typeof logLevel) {\n    case 'number':\n      resolvedLevel = logLevel;\n      break;\n\n    case 'object':\n      // Backward compatibility\n      // TODO - deprecate `priority`\n      // @ts-expect-error\n      resolvedLevel = logLevel.logLevel || logLevel.priority || 0;\n      break;\n\n    default:\n      return 0;\n  }\n  // 'log level must be a number'\n  assert(Number.isFinite(resolvedLevel) && resolvedLevel >= 0);\n\n  return resolvedLevel;\n}\n\n/**\n * \"Normalizes\" the various argument patterns into an object with known types\n * - log(logLevel, message, args) => {logLevel, message, args}\n * - log(message, args) => {logLevel: 0, message, args}\n * - log({logLevel, ...}, message, args) => {logLevel, message, args}\n * - log({logLevel, message, args}) => {logLevel, message, args}\n */\nexport function normalizeArguments(opts: {\n  logLevel;\n  message;\n  collapsed?: boolean;\n  args?: IArguments;\n  opts?;\n}): {\n  logLevel: number;\n  message: string;\n  args: any[];\n} {\n  const {logLevel, message} = opts;\n  opts.logLevel = normalizeLogLevel(logLevel);\n\n  // We use `arguments` instead of rest parameters (...args) because IE\n  // does not support the syntax. Rest parameters is transpiled to code with\n  // perf impact. Doing it here instead avoids constructing args when logging is\n  // disabled.\n  // TODO - remove when/if IE support is dropped\n  const args: any[] = opts.args ? Array.from(opts.args) : [];\n  // args should only contain arguments that appear after `message`\n  // eslint-disable-next-line no-empty\n  while (args.length && args.shift() !== message) {}\n\n  switch (typeof logLevel) {\n    case 'string':\n    case 'function':\n      if (message !== undefined) {\n        args.unshift(message);\n      }\n      opts.message = logLevel;\n      break;\n\n    case 'object':\n      Object.assign(opts, logLevel);\n      break;\n\n    default:\n  }\n\n  // Resolve functions into strings by calling them\n  if (typeof opts.message === 'function') {\n    opts.message = opts.message();\n  }\n  const messageType = typeof opts.message;\n  // 'log message must be a string' or object\n  assert(messageType === 'string' || messageType === 'object');\n\n  // original opts + normalized opts + opts arg + fixed up message\n  return Object.assign(opts, {args}, opts.opts);\n}\n\nfunction decorateMessage(id, message, opts) {\n  if (typeof message === 'string') {\n    const time = opts.time ? leftPad(formatTime(opts.total)) : '';\n    message = opts.time ? `${id}: ${time}  ${message}` : `${id}: ${message}`;\n    message = addColor(message, opts.color, opts.background);\n  }\n  return message;\n}\n\n/** @deprecated Function removed */\nfunction logImageInNode({image, message = '', scale = 1}) {\n  console.warn('removed');\n  return noop;\n}\n\nfunction logImageInBrowser({image, message = '', scale = 1}) {\n  if (typeof image === 'string') {\n    const img = new Image();\n    img.onload = () => {\n      const args = formatImage(img, message, scale);\n      console.log(...args);\n    };\n    img.src = image;\n    return noop;\n  }\n  const element = image.nodeName || '';\n  if (element.toLowerCase() === 'img') {\n    console.log(...formatImage(image, message, scale));\n    return noop;\n  }\n  if (element.toLowerCase() === 'canvas') {\n    const img = new Image();\n    img.onload = () => console.log(...formatImage(img, message, scale));\n    img.src = image.toDataURL();\n    return noop;\n  }\n  return noop;\n}\n\nfunction getTableHeader(table: Table): string {\n  for (const key in table) {\n    for (const title in table[key]) {\n      return title || 'untitled';\n    }\n  }\n  return 'empty';\n}\n", "// @ts-nocheck\n/* eslint-disable */\nglobalThis.probe = {};\n", "import {Log} from './log';\n\n// DEFAULT EXPORT IS A LOG INSTANCE\nexport default new Log({id: '@probe.gl/log'});\n\n// LOGGING\nexport {Log} from './log';\nexport {COLOR} from './utils/color';\n\n// UTILITIES\nexport {addColor} from './utils/color';\nexport {leftPad, rightPad} from './utils/formatters';\nexport {autobind} from './utils/autobind';\nexport {LocalStorage} from './utils/local-storage';\nexport {getHiResTimestamp} from './utils/hi-res-timestamp';\n\nimport './init';\n", "// probe.gl Log compatible loggers\nimport {Log} from '@probe.gl/log';\n\nexport const probeLog = new Log({id: 'loaders.gl'});\n\n// Logs nothing\nexport class NullLog {\n  log() {\n    return () => {};\n  }\n  info() {\n    return () => {};\n  }\n  warn() {\n    return () => {};\n  }\n  error() {\n    return () => {};\n  }\n}\n\n// Logs to console\nexport class ConsoleLog {\n  console;\n\n  constructor() {\n    this.console = console; // eslint-disable-line\n  }\n  log(...args) {\n    return this.console.log.bind(this.console, ...args);\n  }\n  info(...args) {\n    return this.console.info.bind(this.console, ...args);\n  }\n  warn(...args) {\n    return this.console.warn.bind(this.console, ...args);\n  }\n  error(...args) {\n    return this.console.error.bind(this.console, ...args);\n  }\n}\n", "import type {LoaderOptions} from '@loaders.gl/loader-utils';\nimport {isBrowser} from '@loaders.gl/loader-utils';\nimport {ConsoleLog} from './loggers';\n\nexport const DEFAULT_LOADER_OPTIONS: LoaderOptions = {\n  // baseUri\n  fetch: null,\n  mimeType: undefined,\n  nothrow: false,\n  log: new ConsoleLog(), // A probe.gl compatible (`log.log()()` syntax) that just logs to console\n\n  CDN: 'https://unpkg.com/@loaders.gl',\n  worker: true, // By default, use worker if provided by loader.\n  maxConcurrency: 3, // How many worker instances should be created for each loader.\n  maxMobileConcurrency: 1, // How many worker instances should be created for each loader on mobile devices.\n  reuseWorkers: isBrowser, // By default reuse workers in browser (Node.js refuses to terminate if browsers are running)\n  _nodeWorkers: false, // By default do not support node workers\n  _workerType: '', // 'test' to use locally generated workers\n\n  limit: 0,\n  _limitMB: 0,\n  batchSize: 'auto',\n  batchDebounceMs: 0,\n  metadata: false, // TODO - currently only implemented for parseInBatches, adds initial metadata batch,\n  transforms: []\n};\n\nexport const REMOVED_LOADER_OPTIONS = {\n  throws: 'nothrow',\n  dataType: '(no longer used)',\n  uri: 'baseUri',\n  // Warn if fetch options are used on top-level\n  method: 'fetch.method',\n  headers: 'fetch.headers',\n  body: 'fetch.body',\n  mode: 'fetch.mode',\n  credentials: 'fetch.credentials',\n  cache: 'fetch.cache',\n  redirect: 'fetch.redirect',\n  referrer: 'fetch.referrer',\n  referrerPolicy: 'fetch.referrerPolicy',\n  integrity: 'fetch.integrity',\n  keepalive: 'fetch.keepalive',\n  signal: 'fetch.signal'\n};\n", "import type {Loader, LoaderContext, LoaderOptions} from '@loaders.gl/loader-utils';\nimport {isPureObject, isObject} from '../../javascript-utils/is-type';\nimport {fetchFile} from '../fetch/fetch-file';\nimport {probeLog, NullLog} from './loggers';\nimport {DEFAULT_LOADER_OPTIONS, REMOVED_LOADER_OPTIONS} from './option-defaults';\n/**\n * Global state for loaders.gl. Stored on `global.loaders._state`\n */\ntype GlobalLoaderState = {\n  loaderRegistry: Loader[];\n  globalOptions: {[key: string]: any};\n};\n\n/**\n * Helper for safely accessing global loaders.gl variables\n * Wraps initialization of global variable in function to defeat overly aggressive tree-shakers\n */\nexport function getGlobalLoaderState(): GlobalLoaderState {\n  // @ts-ignore\n  globalThis.loaders = globalThis.loaders || {};\n  // @ts-ignore\n  const {loaders} = globalThis;\n\n  // Add _state object to keep separate from modules added to globalThis.loaders\n  loaders._state = loaders._state || {};\n  return loaders._state;\n}\n\n/**\n * Store global loader options on the global object to increase chances of cross loaders-version interoperability\n * NOTE: This use case is not reliable but can help when testing new versions of loaders.gl with existing frameworks\n * @returns global loader options merged with default loader options\n */\nexport const getGlobalLoaderOptions = () => {\n  const state = getGlobalLoaderState();\n  // Ensure all default loader options from this library are mentioned\n  state.globalOptions = state.globalOptions || {...DEFAULT_LOADER_OPTIONS};\n  return state.globalOptions;\n};\n\n/**\n * Set global loader options\n * @param options\n */\nexport function setGlobalOptions(options: object): void {\n  const state = getGlobalLoaderState();\n  const globalOptions = getGlobalLoaderOptions();\n  state.globalOptions = normalizeOptionsInternal(globalOptions, options);\n}\n\n/**\n * Merges options with global opts and loader defaults, also injects baseUri\n * @param options\n * @param loader\n * @param loaders\n * @param url\n */\nexport function normalizeOptions(\n  options: object,\n  loader: Loader,\n  loaders?: Loader[],\n  url?: string\n): object {\n  loaders = loaders || [];\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n\n  validateOptions(options, loaders);\n  return normalizeOptionsInternal(loader, options, url);\n}\n\n/**\n * Gets the current fetch function from options and context\n * @param options\n * @param context\n */\nexport function getFetchFunction(\n  options?: LoaderOptions,\n  context?: Omit<LoaderContext, 'fetch'> & Partial<Pick<LoaderContext, 'fetch'>>\n) {\n  const globalOptions = getGlobalLoaderOptions();\n\n  const fetchOptions = options || globalOptions;\n\n  // options.fetch can be a function\n  if (typeof fetchOptions.fetch === 'function') {\n    return fetchOptions.fetch;\n  }\n\n  // options.fetch can be an options object\n  if (isObject(fetchOptions.fetch)) {\n    return (url) => fetchFile(url, fetchOptions);\n  }\n\n  // else refer to context (from parent loader) if available\n  if (context?.fetch) {\n    return context?.fetch;\n  }\n\n  // else return the default fetch function\n  return fetchFile;\n}\n\n// VALIDATE OPTIONS\n\n/**\n * Warn for unsupported options\n * @param options\n * @param loaders\n */\nfunction validateOptions(options: LoaderOptions, loaders: Loader[]) {\n  // Check top level options\n  validateOptionsObject(options, null, DEFAULT_LOADER_OPTIONS, REMOVED_LOADER_OPTIONS, loaders);\n  for (const loader of loaders) {\n    // Get the scoped, loader specific options from the user supplied options\n    const idOptions = (options && options[loader.id]) || {};\n\n    // Get scoped, loader specific default and deprecated options from the selected loader\n    const loaderOptions = (loader.options && loader.options[loader.id]) || {};\n    const deprecatedOptions =\n      (loader.deprecatedOptions && loader.deprecatedOptions[loader.id]) || {};\n\n    // Validate loader specific options\n    validateOptionsObject(idOptions, loader.id, loaderOptions, deprecatedOptions, loaders);\n  }\n}\n\n// eslint-disable-next-line max-params, complexity\nfunction validateOptionsObject(\n  options,\n  id: string | null,\n  defaultOptions,\n  deprecatedOptions,\n  loaders: Loader[]\n) {\n  const loaderName = id || 'Top level';\n  const prefix = id ? `${id}.` : '';\n\n  for (const key in options) {\n    // If top level option value is an object it could options for a loader, so ignore\n    const isSubOptions = !id && isObject(options[key]);\n    const isBaseUriOption = key === 'baseUri' && !id;\n    const isWorkerUrlOption = key === 'workerUrl' && id;\n    // <loader>.workerUrl requires special handling as it is now auto-generated and no longer specified as a default option.\n    if (!(key in defaultOptions) && !isBaseUriOption && !isWorkerUrlOption) {\n      // Issue deprecation warnings\n      if (key in deprecatedOptions) {\n        probeLog.warn(\n          `${loaderName} loader option \\'${prefix}${key}\\' no longer supported, use \\'${deprecatedOptions[key]}\\'`\n        )();\n      } else if (!isSubOptions) {\n        const suggestion = findSimilarOption(key, loaders);\n        probeLog.warn(\n          `${loaderName} loader option \\'${prefix}${key}\\' not recognized. ${suggestion}`\n        )();\n      }\n    }\n  }\n}\n\nfunction findSimilarOption(optionKey, loaders) {\n  const lowerCaseOptionKey = optionKey.toLowerCase();\n  let bestSuggestion = '';\n  for (const loader of loaders) {\n    for (const key in loader.options) {\n      if (optionKey === key) {\n        return `Did you mean \\'${loader.id}.${key}\\'?`;\n      }\n      const lowerCaseKey = key.toLowerCase();\n      const isPartialMatch =\n        lowerCaseOptionKey.startsWith(lowerCaseKey) || lowerCaseKey.startsWith(lowerCaseOptionKey);\n      if (isPartialMatch) {\n        bestSuggestion = bestSuggestion || `Did you mean \\'${loader.id}.${key}\\'?`;\n      }\n    }\n  }\n  return bestSuggestion;\n}\n\nfunction normalizeOptionsInternal(loader, options, url?: string) {\n  const loaderDefaultOptions = loader.options || {};\n\n  const mergedOptions = {...loaderDefaultOptions};\n\n  addUrlOptions(mergedOptions, url);\n\n  // LOGGING: options.log can be set to `null` to defeat logging\n  if (mergedOptions.log === null) {\n    mergedOptions.log = new NullLog();\n  }\n\n  mergeNestedFields(mergedOptions, getGlobalLoaderOptions());\n  mergeNestedFields(mergedOptions, options);\n\n  return mergedOptions;\n}\n\n// Merge nested options objects\nfunction mergeNestedFields(mergedOptions, options) {\n  for (const key in options) {\n    // Check for nested options\n    // object in options => either no key in defaultOptions or object in defaultOptions\n    if (key in options) {\n      const value = options[key];\n      if (isPureObject(value) && isPureObject(mergedOptions[key])) {\n        mergedOptions[key] = {\n          ...mergedOptions[key],\n          ...options[key]\n        };\n      } else {\n        mergedOptions[key] = options[key];\n      }\n    }\n    // else: No need to merge nested opts, and the initial merge already copied over the nested options\n  }\n}\n\n// Harvest information from the url\n// TODO - baseUri should be a directory, i.e. remove file component from baseUri\n// TODO - extract extension?\n// TODO - extract query parameters?\n// TODO - should these be injected on context instead of options?\nfunction addUrlOptions(options, url?: string) {\n  if (url && !('baseUri' in options)) {\n    options.baseUri = url;\n  }\n}\n", "import type {Loader} from '@loaders.gl/loader-utils';\nimport {assert} from '@loaders.gl/loader-utils';\n\nexport function isLoaderObject(loader?: any): boolean {\n  if (!loader) {\n    return false;\n  }\n\n  if (Array.isArray(loader)) {\n    loader = loader[0];\n  }\n\n  const hasExtensions = Array.isArray(loader?.extensions);\n\n  /* Now handled by types and worker loaders do not have these\n  let hasParser =\n    loader.parseTextSync ||\n    loader.parseSync ||\n    loader.parse ||\n    loader.parseStream || // TODO Remove, Replace with parseInBatches\n    loader.parseInBatches;\n  */\n\n  return hasExtensions;\n}\n\nexport function normalizeLoader(loader: Loader): Loader {\n  // This error is fairly easy to trigger by mixing up import statements etc\n  // So we make an exception and add a developer error message for this case\n  // To help new users from getting stuck here\n  assert(loader, 'null loader');\n  assert(isLoaderObject(loader), 'invalid loader');\n\n  // NORMALIZE [LOADER, OPTIONS] => LOADER\n\n  // If [loader, options], create a new loaders object with options merged in\n  let options;\n  if (Array.isArray(loader)) {\n    options = loader[1];\n    loader = loader[0];\n    loader = {\n      ...loader,\n      options: {...loader.options, ...options}\n    };\n  }\n\n  // NORMALIZE text and binary flags\n  // Ensure at least one of text/binary flags are properly set\n\n  // @ts-expect-error\n  if (loader?.parseTextSync || loader?.parseText) {\n    loader.text = true;\n  }\n\n  if (!loader.text) {\n    loader.binary = true;\n  }\n\n  return loader;\n}\n", "import {Loader} from '@loaders.gl/loader-utils';\nimport {normalizeLoader} from '../loader-utils/normalize-loader';\nimport {getGlobalLoaderState} from '../loader-utils/option-utils';\n\n// Store global registered loaders on the global object to increase chances of cross loaders-version interoperability\n// This use case is not reliable but can help when testing new versions of loaders.gl with existing frameworks\nconst getGlobalLoaderRegistry = () => {\n  const state = getGlobalLoaderState();\n  state.loaderRegistry = state.loaderRegistry || [];\n  return state.loaderRegistry;\n};\n\n/** Register a list of global loaders */\nexport function registerLoaders(loaders: Loader[] | Loader) {\n  const loaderRegistry = getGlobalLoaderRegistry();\n\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n\n  for (const loader of loaders) {\n    const normalizedLoader = normalizeLoader(loader);\n    if (!loaderRegistry.find((registeredLoader) => normalizedLoader === registeredLoader)) {\n      // add to the beginning of the loaderRegistry, so the last registeredLoader get picked\n      loaderRegistry.unshift(normalizedLoader);\n    }\n  }\n}\n\nexport function getRegisteredLoaders(): Loader[] {\n  return getGlobalLoaderRegistry();\n}\n\n/** @deprecated For testing only  */\nexport function _unregisterLoaders() {\n  const state = getGlobalLoaderState();\n  state.loaderRegistry = [];\n}\n", "// loaders.gl, MIT license\nimport {Log} from '@probe.gl/log';\n\nexport const log = new Log({id: 'loaders.gl'});\n", "import type {LoaderContext, LoaderOptions, Loader} from '@loaders.gl/loader-utils';\nimport {compareArrayBuffers, path} from '@loaders.gl/loader-utils';\nimport {normalizeLoader} from '../loader-utils/normalize-loader';\nimport {log} from '../utils/log';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\nimport {getRegisteredLoaders} from './register-loaders';\nimport {isBlob} from '../../javascript-utils/is-type';\n\nconst EXT_PATTERN = /\\.([^.]+)$/;\n\n// TODO - Need a variant that peeks at streams for parseInBatches\n// TODO - Detect multiple matching loaders? Use heuristics to grade matches?\n// TODO - Allow apps to pass context to disambiguate between multiple matches (e.g. multiple .json formats)?\n\n/**\n * Find a loader that matches file extension and/or initial file content\n * Search the loaders array argument for a loader that matches url extension or initial data\n * Returns: a normalized loader\n * @param data data to assist\n * @param loaders\n * @param options\n * @param context used internally, applications should not provide this parameter\n */\nexport async function selectLoader(\n  data: Response | Blob | ArrayBuffer | string,\n  loaders: Loader[] | Loader = [],\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<Loader | null> {\n  if (!validHTTPResponse(data)) {\n    return null;\n  }\n\n  // First make a sync attempt, disabling exceptions\n  let loader = selectLoaderSync(data, loaders, {...options, nothrow: true}, context);\n  if (loader) {\n    return loader;\n  }\n\n  // For Blobs and Files, try to asynchronously read a small initial slice and test again with that\n  // to see if we can detect by initial content\n  if (isBlob(data)) {\n    data = await (data as Blob).slice(0, 10).arrayBuffer();\n    loader = selectLoaderSync(data, loaders, options, context);\n  }\n\n  // no loader available\n  if (!loader && !options?.nothrow) {\n    throw new Error(getNoValidLoaderMessage(data));\n  }\n\n  return loader;\n}\n\n/**\n * Find a loader that matches file extension and/or initial file content\n * Search the loaders array argument for a loader that matches url extension or initial data\n * Returns: a normalized loader\n * @param data data to assist\n * @param loaders\n * @param options\n * @param context used internally, applications should not provide this parameter\n */\nexport function selectLoaderSync(\n  data: Response | Blob | ArrayBuffer | string,\n  loaders: Loader[] | Loader = [],\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Loader | null {\n  if (!validHTTPResponse(data)) {\n    return null;\n  }\n\n  // eslint-disable-next-line complexity\n  // if only a single loader was provided (not as array), force its use\n  // TODO - Should this behavior be kept and documented?\n  if (loaders && !Array.isArray(loaders)) {\n    // TODO - remove support for legacy loaders\n    return normalizeLoader(loaders);\n  }\n\n  // Build list of candidate loaders that will be searched in order for a match\n  let candidateLoaders: Loader[] = [];\n  // First search supplied loaders\n  if (loaders) {\n    candidateLoaders = candidateLoaders.concat(loaders);\n  }\n  // Then fall back to registered loaders\n  if (!options?.ignoreRegisteredLoaders) {\n    candidateLoaders.push(...getRegisteredLoaders());\n  }\n\n  // TODO - remove support for legacy loaders\n  normalizeLoaders(candidateLoaders);\n\n  const loader = selectLoaderInternal(data, candidateLoaders, options, context);\n\n  // no loader available\n  if (!loader && !options?.nothrow) {\n    throw new Error(getNoValidLoaderMessage(data));\n  }\n\n  return loader;\n}\n\n/** Implements loaders selection logic */\n// eslint-disable-next-line complexity\nfunction selectLoaderInternal(\n  data: Response | Blob | ArrayBuffer | string,\n  loaders: Loader[],\n  options?: LoaderOptions,\n  context?: LoaderContext\n) {\n  const {url, type} = getResourceUrlAndType(data);\n\n  const testUrl = url || context?.url;\n\n  let loader: Loader | null = null;\n  let reason: string = '';\n\n  // if options.mimeType is supplied, it takes precedence\n  if (options?.mimeType) {\n    loader = findLoaderByMIMEType(loaders, options?.mimeType);\n    reason = `match forced by supplied MIME type ${options?.mimeType}`;\n  }\n\n  // Look up loader by url\n  loader = loader || findLoaderByUrl(loaders, testUrl);\n  reason = reason || (loader ? `matched url ${testUrl}` : '');\n\n  // Look up loader by mime type\n  loader = loader || findLoaderByMIMEType(loaders, type);\n  reason = reason || (loader ? `matched MIME type ${type}` : '');\n\n  // Look for loader via initial bytes (Note: not always accessible (e.g. Response, stream, async iterator)\n  loader = loader || findLoaderByInitialBytes(loaders, data);\n  reason = reason || (loader ? `matched initial data ${getFirstCharacters(data)}` : '');\n\n  // Look up loader by fallback mime type\n  loader = loader || findLoaderByMIMEType(loaders, options?.fallbackMimeType);\n  reason = reason || (loader ? `matched fallback MIME type ${type}` : '');\n\n  if (reason) {\n    log.log(1, `selectLoader selected ${loader?.name}: ${reason}.`);\n  }\n\n  return loader;\n}\n\n/** Check HTTP Response */\nfunction validHTTPResponse(data: any): boolean {\n  // HANDLE HTTP status\n  if (data instanceof Response) {\n    // 204 - NO CONTENT. This handles cases where e.g. a tile server responds with 204 for a missing tile\n    if (data.status === 204) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** Generate a helpful message to help explain why loader selection failed. */\nfunction getNoValidLoaderMessage(data): string {\n  const {url, type} = getResourceUrlAndType(data);\n\n  let message = 'No valid loader found (';\n  message += url ? `${path.filename(url)}, ` : 'no url provided, ';\n  message += `MIME type: ${type ? `\"${type}\"` : 'not provided'}, `;\n  // First characters are only accessible when called on data (string or arrayBuffer).\n  const firstCharacters: string = data ? getFirstCharacters(data) : '';\n  message += firstCharacters ? ` first bytes: \"${firstCharacters}\"` : 'first bytes: not available';\n  message += ')';\n  return message;\n}\n\nfunction normalizeLoaders(loaders: Loader[]): void {\n  for (const loader of loaders) {\n    normalizeLoader(loader);\n  }\n}\n\n// TODO - Would be nice to support http://example.com/file.glb?parameter=1\n// E.g: x = new URL('http://example.com/file.glb?load=1'; x.pathname\nfunction findLoaderByUrl(loaders: Loader[], url?: string): Loader | null {\n  // Get extension\n  const match = url && EXT_PATTERN.exec(url);\n  const extension = match && match[1];\n  return extension ? findLoaderByExtension(loaders, extension) : null;\n}\n\nfunction findLoaderByExtension(loaders: Loader[], extension: string): Loader | null {\n  extension = extension.toLowerCase();\n\n  for (const loader of loaders) {\n    for (const loaderExtension of loader.extensions) {\n      if (loaderExtension.toLowerCase() === extension) {\n        return loader;\n      }\n    }\n  }\n  return null;\n}\n\nfunction findLoaderByMIMEType(loaders, mimeType) {\n  for (const loader of loaders) {\n    if (loader.mimeTypes && loader.mimeTypes.includes(mimeType)) {\n      return loader;\n    }\n\n    // Support referring to loaders using the \"unregistered tree\"\n    // https://en.wikipedia.org/wiki/Media_type#Unregistered_tree\n    if (mimeType === `application/x.${loader.id}`) {\n      return loader;\n    }\n  }\n  return null;\n}\n\nfunction findLoaderByInitialBytes(loaders, data) {\n  if (!data) {\n    return null;\n  }\n\n  for (const loader of loaders) {\n    if (typeof data === 'string') {\n      if (testDataAgainstText(data, loader)) {\n        return loader;\n      }\n    } else if (ArrayBuffer.isView(data)) {\n      // Typed Arrays can have offsets into underlying buffer\n      if (testDataAgainstBinary(data.buffer, data.byteOffset, loader)) {\n        return loader;\n      }\n    } else if (data instanceof ArrayBuffer) {\n      const byteOffset = 0;\n      if (testDataAgainstBinary(data, byteOffset, loader)) {\n        return loader;\n      }\n    }\n    // TODO Handle streaming case (requires creating a new AsyncIterator)\n  }\n  return null;\n}\n\nfunction testDataAgainstText(data, loader) {\n  if (loader.testText) {\n    return loader.testText(data);\n  }\n\n  const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];\n  return tests.some((test) => data.startsWith(test));\n}\n\nfunction testDataAgainstBinary(data, byteOffset, loader) {\n  const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];\n  return tests.some((test) => testBinary(data, byteOffset, loader, test));\n}\n\nfunction testBinary(data, byteOffset, loader, test) {\n  if (test instanceof ArrayBuffer) {\n    return compareArrayBuffers(test, data, test.byteLength);\n  }\n  switch (typeof test) {\n    case 'function':\n      return test(data, loader);\n\n    case 'string':\n      // Magic bytes check: If `test` is a string, check if binary data starts with that strings\n      const magic = getMagicString(data, byteOffset, test.length);\n      return test === magic;\n\n    default:\n      return false;\n  }\n}\n\nfunction getFirstCharacters(data, length: number = 5) {\n  if (typeof data === 'string') {\n    return data.slice(0, length);\n  } else if (ArrayBuffer.isView(data)) {\n    // Typed Arrays can have offsets into underlying buffer\n    return getMagicString(data.buffer, data.byteOffset, length);\n  } else if (data instanceof ArrayBuffer) {\n    const byteOffset = 0;\n    return getMagicString(data, byteOffset, length);\n  }\n  return '';\n}\n\nfunction getMagicString(arrayBuffer, byteOffset, length) {\n  if (arrayBuffer.byteLength < byteOffset + length) {\n    return '';\n  }\n  const dataView = new DataView(arrayBuffer);\n  let magic = '';\n  for (let i = 0; i < length; i++) {\n    magic += String.fromCharCode(dataView.getUint8(byteOffset + i));\n  }\n  return magic;\n}\n", "import type {IteratorOptions} from './make-iterator';\n\nconst DEFAULT_CHUNK_SIZE = 256 * 1024;\n\n/**\n * Returns an iterator that breaks a big string into chunks and yields them one-by-one as ArrayBuffers\n * @param blob string to iterate over\n * @param options\n * @param options.chunkSize\n */\nexport function* makeStringIterator(\n  string: string,\n  options?: IteratorOptions\n): Iterable<ArrayBuffer> {\n  const chunkSize = options?.chunkSize || DEFAULT_CHUNK_SIZE;\n\n  let offset = 0;\n  const textEncoder = new TextEncoder();\n  while (offset < string.length) {\n    // Create a chunk of the right size\n    const chunkLength = Math.min(string.length - offset, chunkSize);\n    const chunk = string.slice(offset, offset + chunkLength);\n    offset += chunkLength;\n\n    // yield an ArrayBuffer chunk\n    yield textEncoder.encode(chunk);\n  }\n}\n", "import type {IteratorOptions} from './make-iterator';\n\nconst DEFAULT_CHUNK_SIZE = 256 * 1024;\n\n/**\n * Returns an iterator that breaks a big ArrayBuffer into chunks and yields them one-by-one\n * @param blob ArrayBuffer to iterate over\n * @param options\n * @param options.chunkSize\n */\nexport function* makeArrayBufferIterator(\n  arrayBuffer: ArrayBuffer,\n  options: IteratorOptions = {}\n): Iterable<ArrayBuffer> {\n  const {chunkSize = DEFAULT_CHUNK_SIZE} = options;\n\n  let byteOffset = 0;\n\n  while (byteOffset < arrayBuffer.byteLength) {\n    // Create a chunk of the right size\n    const chunkByteLength = Math.min(arrayBuffer.byteLength - byteOffset, chunkSize);\n    const chunk = new ArrayBuffer(chunkByteLength);\n\n    // Copy data from the big chunk\n    const sourceArray = new Uint8Array(arrayBuffer, byteOffset, chunkByteLength);\n    const chunkArray = new Uint8Array(chunk);\n    chunkArray.set(sourceArray);\n\n    // yield the chunk\n    byteOffset += chunkByteLength;\n    yield chunk;\n  }\n}\n", "import type {IteratorOptions} from './make-iterator';\n\nconst DEFAULT_CHUNK_SIZE = 1024 * 1024; // 1MB — biggest value that keeps UI responsive\n\n/**\n * Returns an iterator that breaks a big Blob into chunks and yields them one-by-one\n * @param blob Blob or File object\n * @param options\n * @param options.chunkSize\n */\nexport async function* makeBlobIterator(\n  blob: Blob,\n  options?: IteratorOptions\n): AsyncIterable<ArrayBuffer> {\n  const chunkSize = options?.chunkSize || DEFAULT_CHUNK_SIZE;\n\n  let offset = 0;\n  while (offset < blob.size) {\n    const end = offset + chunkSize;\n\n    const chunk = await blob.slice(offset, end).arrayBuffer();\n\n    offset = end;\n    yield chunk;\n  }\n}\n", "import type {Readable} from 'stream';\nimport {isBrowser, toArrayBuffer} from '@loaders.gl/loader-utils';\n\nexport type StreamIteratorOptions = {\n  _streamReadAhead?: boolean;\n};\n\n/**\n * Returns an async iterable that reads from a stream (works in both Node.js and browsers)\n * @param stream stream to iterator over\n */\nexport function makeStreamIterator(\n  stream: ReadableStream | Readable,\n  options?: StreamIteratorOptions\n): AsyncIterable<ArrayBuffer> {\n  return isBrowser\n    ? makeBrowserStreamIterator(stream as ReadableStream, options)\n    : makeNodeStreamIterator(stream as Readable, options);\n}\n\n/**\n * Returns an async iterable that reads from a DOM (browser) stream\n * @param stream stream to iterate from\n * @see https://jakearchibald.com/2017/async-iterators-and-generators/#making-streams-iterate\n */\nasync function* makeBrowserStreamIterator(\n  stream: ReadableStream,\n  options?: StreamIteratorOptions\n): AsyncIterable<ArrayBuffer> {\n  // WhatWG: stream is supposed to have a `getIterator` method\n  // if (typeof stream.getIterator === 'function') {\n  //   return stream.getIterator();\n  // }\n  // if (typeof stream[Symbol.asyncIterator] === 'function') {\n  //   return makeToArrayBufferIterator(stream);\n  // }\n\n  // In the browser, we first need to get a lock on the stream\n  const reader = stream.getReader();\n\n  let nextBatchPromise: Promise<{done?: boolean; value?: Uint8Array}> | undefined;\n\n  try {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const currentBatchPromise = nextBatchPromise || reader.read();\n      // Issue a read for an additional batch, while we await the next batch\n      // Idea is to make fetching happen in parallel with processing / parsing\n      if (options?._streamReadAhead) {\n        nextBatchPromise = reader.read();\n      }\n      // Read from the stream\n      // value is a Uint8Array\n      const {done, value} = await currentBatchPromise;\n      // Exit if we're done\n      if (done) {\n        return;\n      }\n      // Else yield the chunk\n      yield toArrayBuffer(value);\n    }\n  } catch (error) {\n    // TODO - examples makes it look like this should always be called,\n    // but that generates exceptions so only call it if we do not reach the end\n    reader.releaseLock();\n  }\n}\n\n/**\n * Returns an async iterable that reads from a DOM (browser) stream\n * @param stream stream to iterate from\n * @note Requires Node.js >= 10\n */\nasync function* makeNodeStreamIterator(\n  stream: Readable,\n  options?: StreamIteratorOptions\n): AsyncIterable<ArrayBuffer> {\n  // Hacky test for node version to ensure we don't call bad polyfills\n  // NODE 10+: stream is an asyncIterator\n  for await (const chunk of stream) {\n    yield toArrayBuffer(chunk); // Coerce each chunk to ArrayBuffer\n  }\n}\n/* TODO - remove NODE < 10\n * @see https://github.com/bustle/streaming-iterables, MIT license\n *\n  if (typeof stream[Symbol.asyncIterator] === 'function') {\n    return;\n  }\n\n  // TODO - check if is this ever used in Node 10+?\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const data = stream.read();\n    if (data !== null) {\n      yield toArrayBuffer(data);\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (stream._readableState?.ended) {\n      return;\n    }\n    await onceReadable(stream);\n  }\n\nasync function onceReadable(stream: Readable): Promise<any> {\n  return new Promise((resolve) => {\n    stream.once('readable', resolve);\n  });\n}\n  */\n", "import type {ReadStream} from 'fs';\n\nimport {makeStringIterator} from './make-string-iterator';\nimport {makeArrayBufferIterator} from './make-array-buffer-iterator';\nimport {makeBlobIterator} from './make-blob-iterator';\nimport type {StreamIteratorOptions} from './make-stream-iterator';\nimport {makeStreamIterator} from './make-stream-iterator';\nimport {isBlob, isReadableStream, isResponse} from '../../javascript-utils/is-type';\n\n/**\n * @param [options.chunkSize]\n */\nexport type IteratorOptions = StreamIteratorOptions & {\n  chunkSize?: number;\n};\n\n/**\n * Returns an iterator that breaks its input into chunks and yields them one-by-one.\n * @param data\n * @param options\n * @returns\n * This function can e.g. be used to enable data sources that can only be read atomically\n * (such as `Blob` and `File` via `FileReader`) to still be parsed in batches.\n */\nexport function makeIterator(\n  data: ArrayBuffer | string | Blob | Response | ReadableStream | ReadStream,\n  options?: IteratorOptions\n): AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer> {\n  if (typeof data === 'string') {\n    // Note: Converts string chunks to binary\n    return makeStringIterator(data, options);\n  }\n  if (data instanceof ArrayBuffer) {\n    return makeArrayBufferIterator(data, options);\n  }\n  if (isBlob(data)) {\n    return makeBlobIterator(data as Blob, options);\n  }\n  if (isReadableStream(data)) {\n    return makeStreamIterator(data as ReadableStream, options);\n  }\n  if (isResponse(data)) {\n    const response = data as Response;\n    return makeStreamIterator(response.body as ReadableStream, options);\n  }\n  throw new Error('makeIterator');\n}\n", "import type {\n  DataType,\n  SyncDataType,\n  BatchableDataType,\n  Loader,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport {concatenateArrayBuffersAsync} from '@loaders.gl/loader-utils';\nimport {\n  isResponse,\n  isReadableStream,\n  isAsyncIterable,\n  isIterable,\n  isIterator,\n  isBlob,\n  isBuffer\n} from '../../javascript-utils/is-type';\nimport {makeIterator} from '../../iterators/make-iterator/make-iterator';\nimport {checkResponse, makeResponse} from '../utils/response-utils';\n\nconst ERR_DATA = 'Cannot convert supplied data type';\n\n// eslint-disable-next-line complexity\nexport function getArrayBufferOrStringFromDataSync(\n  data: SyncDataType,\n  loader: Loader,\n  options: LoaderOptions\n): ArrayBuffer | string {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n\n  if (isBuffer(data)) {\n    // @ts-ignore\n    data = data.buffer;\n  }\n\n  if (data instanceof ArrayBuffer) {\n    const arrayBuffer = data;\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n    return arrayBuffer;\n  }\n\n  // We may need to handle offsets\n  if (ArrayBuffer.isView(data)) {\n    // TextDecoder is invoked on typed arrays and will handle offsets\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(data);\n    }\n\n    let arrayBuffer = data.buffer;\n\n    // Since we are returning the underlying arrayBuffer, we must create a new copy\n    // if this typed array / Buffer is a partial view into the ArryayBuffer\n    // TODO - this is a potentially unnecessary copy\n    const byteLength = data.byteLength || data.length;\n    if (data.byteOffset !== 0 || byteLength !== arrayBuffer.byteLength) {\n      // console.warn(`loaders.gl copying arraybuffer of length ${byteLength}`);\n      arrayBuffer = arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);\n    }\n    return arrayBuffer;\n  }\n\n  throw new Error(ERR_DATA);\n}\n\n// Convert async iterator to a promise\nexport async function getArrayBufferOrStringFromData(\n  data: DataType,\n  loader: Loader,\n  options: LoaderOptions\n): Promise<ArrayBuffer | string> {\n  const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n  if (typeof data === 'string' || isArrayBuffer) {\n    return getArrayBufferOrStringFromDataSync(data as string | ArrayBuffer, loader, options);\n  }\n\n  // Blobs and files are FileReader compatible\n  if (isBlob(data)) {\n    data = await makeResponse(data);\n  }\n\n  if (isResponse(data)) {\n    const response = data as Response;\n    await checkResponse(response);\n    return loader.binary ? await response.arrayBuffer() : await response.text();\n  }\n\n  if (isReadableStream(data)) {\n    // @ts-expect-error TS2559 options type\n    data = makeIterator(data as ReadableStream, options);\n  }\n\n  if (isIterable(data) || isAsyncIterable(data)) {\n    // Assume arrayBuffer iterator - attempt to concatenate\n    return concatenateArrayBuffersAsync(data as AsyncIterable<ArrayBuffer>);\n  }\n\n  throw new Error(ERR_DATA);\n}\n\nexport async function getAsyncIterableFromData(\n  data: BatchableDataType,\n  options: LoaderOptions\n): Promise<AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>> {\n  if (isIterator(data)) {\n    return data as AsyncIterable<ArrayBuffer>;\n  }\n\n  if (isResponse(data)) {\n    const response = data as Response;\n    // Note Since this function is not async, we currently can't load error message, just status\n    await checkResponse(response);\n    // TODO - bug in polyfill, body can be a Promise under Node.js\n    // eslint-disable-next-line @typescript-eslint/await-thenable\n    const body = await response.body;\n    // TODO - body can be null?\n    return makeIterator(body as ReadableStream<Uint8Array>, options as any);\n  }\n\n  if (isBlob(data) || isReadableStream(data)) {\n    return makeIterator(data as Blob | ReadableStream, options as any);\n  }\n\n  if (isAsyncIterable(data)) {\n    return data[Symbol.asyncIterator]();\n  }\n\n  return getIterableFromData(data);\n}\n\nexport async function getReadableStream(data: BatchableDataType): Promise<ReadableStream> {\n  if (isReadableStream(data)) {\n    return data as ReadableStream;\n  }\n  if (isResponse(data)) {\n    // @ts-ignore\n    return data.body;\n  }\n  const response = await makeResponse(data);\n  // @ts-ignore\n  return response.body;\n}\n\n// HELPERS\n\nfunction getIterableFromData(data) {\n  // generate an iterator that emits a single chunk\n  if (ArrayBuffer.isView(data)) {\n    return (function* oneChunk() {\n      yield data.buffer;\n    })();\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return (function* oneChunk() {\n      yield data;\n    })();\n  }\n\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n\n  throw new Error(ERR_DATA);\n}\n", "import type {Loader, LoaderOptions, LoaderContext} from '@loaders.gl/loader-utils';\nimport {getFetchFunction} from './option-utils';\n\n/**\n * \"sub\" loaders invoked by other loaders get a \"context\" injected on `this`\n * The context will inject core methods like `parse` and contain information\n * about loaders and options passed in to the top-level `parse` call.\n *\n * @param context\n * @param options\n * @param previousContext\n */\nexport function getLoaderContext(\n  context: Omit<LoaderContext, 'fetch'> & Partial<Pick<LoaderContext, 'fetch'>>,\n  options?: LoaderOptions,\n  previousContext: LoaderContext | null = null\n): LoaderContext {\n  // For recursive calls, we already have a context\n  // TODO - add any additional loaders to context?\n  if (previousContext) {\n    return previousContext;\n  }\n\n  const resolvedContext: LoaderContext = {\n    fetch: getFetchFunction(options, context),\n    ...context\n  };\n\n  // Recursive loading does not use single loader\n  if (!Array.isArray(resolvedContext.loaders)) {\n    resolvedContext.loaders = null;\n  }\n\n  return resolvedContext;\n}\n\n// eslint-disable-next-line complexity\nexport function getLoadersFromContext(\n  loaders: Loader[] | Loader | undefined,\n  context?: LoaderContext\n) {\n  // A single non-array loader is force selected, but only on top-level (context === null)\n  if (!context && loaders && !Array.isArray(loaders)) {\n    return loaders;\n  }\n\n  // Create a merged list\n  let candidateLoaders;\n  if (loaders) {\n    candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];\n  }\n  if (context && context.loaders) {\n    const contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];\n    candidateLoaders = candidateLoaders ? [...candidateLoaders, ...contextLoaders] : contextLoaders;\n  }\n  // If no loaders, return null to look in globally registered loaders\n  return candidateLoaders && candidateLoaders.length ? candidateLoaders : null;\n}\n", "import type {DataType, Loader, LoaderContext, LoaderOptions} from '@loaders.gl/loader-utils';\nimport {assert, validateWorkerVersion} from '@loaders.gl/worker-utils';\nimport {parseWithWorker, canParseWithWorker} from '@loaders.gl/loader-utils';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {isResponse} from '../../javascript-utils/is-type';\nimport {normalizeOptions} from '../loader-utils/option-utils';\nimport {getArrayBufferOrStringFromData} from '../loader-utils/get-data';\nimport {getLoaderContext, getLoadersFromContext} from '../loader-utils/loader-context';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\nimport {selectLoader} from './select-loader';\n\n/**\n * Parses `data` using a specified loader\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\nexport async function parse(\n  data: DataType | Promise<DataType>,\n  loaders?: Loader | Loader[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<any> {\n  assert(!context || typeof context === 'object'); // parse no longer accepts final url\n\n  // Signature: parse(data, options, context | url)\n  // Uses registered loaders\n  if (loaders && !Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined; // context not supported in short signature\n    options = loaders as LoaderOptions;\n    loaders = undefined;\n  }\n\n  data = await data; // Resolve any promise\n  options = options || {};\n\n  // Extract a url for auto detection\n  const {url} = getResourceUrlAndType(data);\n\n  // Chooses a loader (and normalizes it)\n  // Also use any loaders in the context, new loaders take priority\n  const typedLoaders = loaders as Loader | Loader[] | undefined;\n  const candidateLoaders = getLoadersFromContext(typedLoaders, context);\n  // todo hacky type cast\n  const loader = await selectLoader(data as ArrayBuffer, candidateLoaders, options);\n  // Note: if no loader was found, if so just return null\n  if (!loader) {\n    return null;\n  }\n\n  // Normalize options\n  options = normalizeOptions(options, loader, candidateLoaders, url);\n\n  // Get a context (if already present, will be unchanged)\n  context = getLoaderContext({url, parse, loaders: candidateLoaders}, options, context);\n\n  return await parseWithLoader(loader, data, options, context);\n}\n\n// TODO: support progress and abort\n// TODO - should accept loader.parseAsyncIterator and concatenate.\nasync function parseWithLoader(loader, data, options, context) {\n  validateWorkerVersion(loader);\n\n  if (isResponse(data)) {\n    // Serialize to support passing the response to web worker\n    const response = data as Response;\n    const {ok, redirected, status, statusText, type, url} = response;\n    const headers = Object.fromEntries(response.headers.entries());\n    context.response = {headers, ok, redirected, status, statusText, type, url};\n  }\n\n  data = await getArrayBufferOrStringFromData(data, loader, options);\n\n  // First check for synchronous text parser, wrap results in promises\n  if (loader.parseTextSync && typeof data === 'string') {\n    options.dataType = 'text';\n    return loader.parseTextSync(data, options, context, loader);\n  }\n\n  // If we have a workerUrl and the loader can parse the given options efficiently in a worker\n  if (canParseWithWorker(loader, options)) {\n    return await parseWithWorker(loader, data, options, context, parse);\n  }\n\n  // Check for asynchronous parser\n  if (loader.parseText && typeof data === 'string') {\n    return await loader.parseText(data, options, context, loader);\n  }\n\n  if (loader.parse) {\n    return await loader.parse(data, options, context, loader);\n  }\n\n  // This should not happen, all sync loaders should also offer `parse` function\n  assert(!loader.parseSync);\n\n  // TBD - If asynchronous parser not available, return null\n  throw new Error(`${loader.id} loader - no parser found and worker is disabled`);\n}\n", "import type {\n  SyncDataType,\n  Loader,\n  LoaderWithParser,\n  LoaderContext,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport {assert} from '@loaders.gl/loader-utils';\nimport {selectLoaderSync} from './select-loader';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {normalizeOptions} from '../loader-utils/option-utils';\nimport {getArrayBufferOrStringFromDataSync} from '../loader-utils/get-data';\nimport {getLoaderContext, getLoadersFromContext} from '../loader-utils/loader-context';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\n\n/**\n * Parses `data` synchronously using a specified loader\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\nexport function parseSync(\n  data: SyncDataType,\n  loaders?: Loader | Loader[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): any {\n  assert(!context || typeof context === 'object'); // parseSync no longer accepts final url\n\n  // Signature: parseSync(data, options)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined; // context not supported in short signature\n    options = loaders as LoaderOptions;\n    loaders = undefined;\n  }\n\n  options = options || {};\n\n  // Chooses a loader (and normalizes it)\n  // Also use any loaders in the context, new loaders take priority\n  const typedLoaders = loaders as Loader | Loader[] | undefined;\n  const candidateLoaders = getLoadersFromContext(typedLoaders, context);\n  const loader = selectLoaderSync(data, candidateLoaders, options);\n  // Note: if nothrow option was set, it is possible that no loader was found, if so just return null\n  if (!loader) {\n    return null;\n  }\n\n  // Normalize options\n  options = normalizeOptions(options, loader, candidateLoaders);\n\n  // Extract a url for auto detection\n  const {url} = getResourceUrlAndType(data);\n\n  const parse = () => {\n    throw new Error('parseSync called parse');\n  };\n  context = getLoaderContext({url, parseSync, parse, loaders: loaders as Loader[]}, options);\n\n  return parseWithLoaderSync(loader as LoaderWithParser, data, options, context);\n}\n\n// TODO - should accept loader.parseSync/parse and generate 1 chunk asyncIterator\nfunction parseWithLoaderSync(\n  loader: LoaderWithParser,\n  data: SyncDataType,\n  options: LoaderOptions,\n  context: LoaderContext\n) {\n  data = getArrayBufferOrStringFromDataSync(data, loader, options);\n\n  if (loader.parseTextSync && typeof data === 'string') {\n    return loader.parseTextSync(data, options); // , context, loader);\n  }\n\n  if (loader.parseSync && data instanceof ArrayBuffer) {\n    return loader.parseSync(data, options, context); // , loader);\n  }\n\n  // TBD - If synchronous parser not available, return null\n  throw new Error(\n    `${loader.name} loader: 'parseSync' not supported by this loader, use 'parse' instead. ${\n      context.url || ''\n    }`\n  );\n}\n", "import type {Batch} from '@loaders.gl/schema';\nimport type {\n  BatchableDataType,\n  Loader,\n  LoaderWithParser,\n  LoaderContext,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport {assert, concatenateArrayBuffersAsync} from '@loaders.gl/loader-utils';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {normalizeOptions} from '../loader-utils/option-utils';\nimport {getLoaderContext} from '../loader-utils/loader-context';\nimport {getAsyncIterableFromData} from '../loader-utils/get-data';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\nimport {selectLoader} from './select-loader';\n\n// Ensure `parse` is available in context if loader falls back to `parse`\nimport {parse} from './parse';\n\n/**\n * Parses `data` using a specified loader\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\nexport async function parseInBatches(\n  data: BatchableDataType,\n  loaders?: Loader | Loader[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<AsyncIterable<any>> {\n  assert(!context || typeof context === 'object'); // parseInBatches no longer accepts final url\n\n  // Signature: parseInBatches(data, options, url) - Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined; // context not supported in short signature\n    options = loaders as LoaderOptions;\n    loaders = undefined;\n  }\n\n  data = await data; // Resolve any promise\n  options = options || {};\n\n  // Extract a url for auto detection\n  const {url} = getResourceUrlAndType(data);\n\n  // Chooses a loader and normalizes it\n  // Note - only uses URL and contentType for streams and iterator inputs\n  const loader = await selectLoader(data as ArrayBuffer, loaders as Loader[], options);\n  // Note: if options.nothrow was set, it is possible that no loader was found, if so just return null\n  if (!loader) {\n    // @ts-ignore\n    return null;\n  }\n\n  // Normalize options\n  // @ts-ignore\n  options = normalizeOptions(options, loader, loaders, url);\n  // @ts-ignore\n  context = getLoaderContext(\n    // @ts-ignore\n    {url, parseInBatches, parse, loaders: loaders as Loader[]},\n    options,\n    context\n  );\n\n  return await parseWithLoaderInBatches(loader as LoaderWithParser, data, options, context);\n}\n\n/**\n * Loader has been selected and context has been prepared, see if we need to emit a metadata batch\n */\nasync function parseWithLoaderInBatches(\n  loader: LoaderWithParser,\n  data: BatchableDataType,\n  options: LoaderOptions,\n  context: LoaderContext\n): Promise<AsyncIterable<any>> {\n  const outputIterator = await parseToOutputIterator(loader, data, options, context);\n\n  // Generate metadata batch if requested\n  if (!options.metadata) {\n    return outputIterator;\n  }\n\n  const metadataBatch = {\n    batchType: 'metadata',\n    metadata: {\n      _loader: loader,\n      _context: context\n    },\n    // Populate with some default fields to avoid crashing\n    data: [],\n    bytesUsed: 0\n  };\n\n  async function* makeMetadataBatchIterator(iterator) {\n    yield metadataBatch;\n    yield* iterator;\n  }\n\n  return makeMetadataBatchIterator(outputIterator);\n}\n\n/**\n * Prep work is done, now it is time to start parsing into an output operator\n * The approach depends on which parse function the loader exposes\n * `parseInBatches` (preferred), `parse` (fallback)\n */\nasync function parseToOutputIterator(\n  loader: LoaderWithParser,\n  data: BatchableDataType,\n  options: LoaderOptions,\n  context: LoaderContext\n): Promise<AsyncIterable<any>> {\n  // Get an iterator from the input\n  const inputIterator = await getAsyncIterableFromData(data, options);\n\n  // Apply any iterator transforms (options.transforms)\n  const transformedIterator = await applyInputTransforms(inputIterator, options?.transforms || []);\n\n  // If loader supports parseInBatches, we are done\n  if (loader.parseInBatches) {\n    return loader.parseInBatches(transformedIterator, options, context);\n  }\n\n  // Fallback: load atomically using `parse` concatenating input iterator into single chunk\n  async function* parseChunkInBatches() {\n    const arrayBuffer = await concatenateArrayBuffersAsync(transformedIterator);\n    // Call `parse` instead of `loader.parse` to ensure we can call workers etc.\n    const parsedData = await parse(\n      arrayBuffer,\n      loader,\n      // TODO - Hack: supply loaders MIME type to ensure we match it\n      {...options, mimeType: loader.mimeTypes[0]},\n      context\n    );\n    // yield a single batch, the output from loader.parse()\n    // TODO - run through batch builder to apply options etc...\n    const batch: Batch = {\n      mimeType: loader.mimeTypes[0],\n      shape: Array.isArray(parsedData) ? 'row-table' : 'unknown',\n      batchType: 'data',\n      data: parsedData,\n      length: Array.isArray(parsedData) ? parsedData.length : 1\n    };\n    yield batch;\n  }\n\n  return parseChunkInBatches();\n}\n\ntype TransformBatches = (\n  asyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>\n) => AsyncIterable<ArrayBuffer>;\n\n/**\n * Create an iterator chain with any transform iterators (crypto, decompression)\n * @param inputIterator\n * @param options\n */\nasync function applyInputTransforms(\n  inputIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>,\n  transforms: TransformBatches[] = []\n): Promise<AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>> {\n  let iteratorChain = inputIterator;\n  for await (const transformBatches of transforms) {\n    iteratorChain = transformBatches(iteratorChain);\n  }\n  return iteratorChain;\n}\n", "import type {DataType, Loader, LoaderContext, LoaderOptions} from '@loaders.gl/loader-utils';\nimport {isBlob} from '../../javascript-utils/is-type';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {getFetchFunction} from '../loader-utils/option-utils';\n\nimport {parse} from './parse';\n\n/**\n * Parses `data` using a specified loader\n * Note: Load does duplicate a lot of parse.\n * it can also call fetchFile on string urls, which `parse` won't do.\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\n// implementation signature\nexport async function load(\n  url: string | DataType,\n  loaders?: Loader | Loader[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<any> {\n  // Signature: load(url, options)\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined; // context not supported in short signature\n    options = loaders as LoaderOptions;\n    loaders = undefined;\n  }\n\n  // Select fetch function\n  const fetch = getFetchFunction(options);\n\n  // at this point, `url` could be already loaded binary data\n  let data = url;\n  // url is a string, fetch the url\n  if (typeof url === 'string') {\n    data = await fetch(url);\n    // URL is Blob or File, fetchFile handles it (alt: we could generate ObjectURL here)\n  }\n\n  if (isBlob(url)) {\n    // The fetch response object will contain blob.name\n    data = await fetch(url);\n  }\n\n  // Data is loaded (at least we have a `Response` object) so time to hand over to `parse`\n  return await parse(data, loaders, options);\n}\n", "import type {LoaderWithParser, LoaderOptions, LoaderContext} from '@loaders.gl/loader-utils';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {getFetchFunction} from '../loader-utils/option-utils';\n\nimport {parseInBatches} from './parse-in-batches';\n\ntype FileType = string | File | Blob | Response | (string | File | Blob | Response)[] | FileList;\n\n/**\n * Parses `data` using a specified loader\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\nexport function loadInBatches(\n  files: FileType,\n  loaders?: LoaderWithParser | LoaderWithParser[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<AsyncIterable<any>>;\n\nexport function loadInBatches(\n  files: FileType[] | FileList,\n  loaders?: LoaderWithParser | LoaderWithParser[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<AsyncIterable<any>>;\n\nexport function loadInBatches(files, loaders, options, context) {\n  // Signature: load(url, options)\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined; // context not supported in short signature\n    options = loaders;\n    loaders = null;\n  }\n\n  // Select fetch function\n  const fetch = getFetchFunction(options || {});\n\n  // Single url/file\n  if (!Array.isArray(files)) {\n    return loadOneFileInBatches(files, loaders, options, fetch);\n  }\n\n  // Multiple URLs / files\n  const promises = files.map((file) => loadOneFileInBatches(file, loaders, options, fetch));\n\n  // No point in waiting here for all responses before starting to stream individual streams?\n  return promises;\n}\n\nasync function loadOneFileInBatches(file, loaders, options, fetch) {\n  if (typeof file === 'string') {\n    const url = file;\n    const response = await fetch(url);\n    return await parseInBatches(response, loaders, options);\n  }\n  return await parseInBatches(file, loaders, options);\n}\n", "import {Writer, LoaderOptions, canEncodeWithWorker} from '@loaders.gl/loader-utils';\nimport {processOnWorker} from '@loaders.gl/worker-utils';\nimport {concatenateArrayBuffers, resolvePath} from '@loaders.gl/loader-utils';\nimport {isBrowser} from '@loaders.gl/loader-utils';\nimport {writeFile} from '../fetch/write-file';\nimport {fetchFile} from '../fetch/fetch-file';\nimport {getLoaderOptions} from './loader-options';\n\n/**\n * Encode loaded data into a binary ArrayBuffer using the specified Writer.\n */\nexport async function encode(\n  data: any,\n  writer: Writer,\n  options?: LoaderOptions\n): Promise<ArrayBuffer> {\n  const globalOptions = getLoaderOptions();\n  options = {...globalOptions, ...options};\n  if (canEncodeWithWorker(writer, options)) {\n    return await processOnWorker(writer, data, options);\n  }\n\n  // TODO Merge default writer options with options argument like it is done in load module.\n  if (writer.encode) {\n    return await writer.encode(data, options);\n  }\n\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n\n  if (writer.encodeText) {\n    return new TextEncoder().encode(await writer.encodeText(data, options));\n  }\n\n  if (writer.encodeInBatches) {\n    // Create an iterator representing the data\n    // TODO - Assumes this is a table\n    const batches = encodeInBatches(data, writer, options);\n\n    // Concatenate the output\n    const chunks: any[] = [];\n    for await (const batch of batches) {\n      chunks.push(batch);\n    }\n    // @ts-ignore\n    return concatenateArrayBuffers(...chunks);\n  }\n\n  if (!isBrowser && writer.encodeURLtoURL) {\n    // TODO - how to generate filenames with correct extensions?\n    const tmpInputFilename = getTemporaryFilename('input');\n    await writeFile(tmpInputFilename, data);\n\n    const tmpOutputFilename = getTemporaryFilename('output');\n\n    const outputFilename = await encodeURLtoURL(\n      tmpInputFilename,\n      tmpOutputFilename,\n      writer,\n      options\n    );\n\n    const response = await fetchFile(outputFilename);\n    return response.arrayBuffer();\n  }\n\n  throw new Error('Writer could not encode data');\n}\n\n/**\n * Encode loaded data into a binary ArrayBuffer using the specified Writer.\n */\nexport function encodeSync(data: any, writer: Writer, options?: LoaderOptions): ArrayBuffer {\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n  throw new Error('Writer could not synchronously encode data');\n}\n\n/**\n * Encode loaded data to text using the specified Writer\n * @note This is a convenience function not intended for production use on large input data.\n * It is not optimized for performance. Data maybe converted from text to binary and back.\n * @throws if the writer does not generate text output\n */\nexport async function encodeText(\n  data: any,\n  writer: Writer,\n  options?: LoaderOptions\n): Promise<string> {\n  if (writer.text && writer.encodeText) {\n    return await writer.encodeText(data, options);\n  }\n\n  if (writer.text && (writer.encode || writer.encodeInBatches)) {\n    const arrayBuffer = await encode(data, writer, options);\n    return new TextDecoder().decode(arrayBuffer);\n  }\n\n  throw new Error('Writer could not encode data as text');\n}\n\n/**\n * Encode loaded data into a sequence (iterator) of binary ArrayBuffers using the specified Writer.\n */\nexport function encodeInBatches(\n  data: any,\n  writer: Writer,\n  options?: LoaderOptions\n): AsyncIterable<ArrayBuffer> {\n  if (writer.encodeInBatches) {\n    const dataIterator = getIterator(data);\n    return writer.encodeInBatches(dataIterator, options);\n  }\n  // TODO -fall back to atomic encode?\n  throw new Error('Writer could not encode data in batches');\n}\n\n/**\n * Encode data stored in a file (on disk) to another file.\n * @note Node.js only. This function enables using command-line converters as \"writers\".\n */\nexport async function encodeURLtoURL(\n  inputUrl,\n  outputUrl,\n  writer: Writer,\n  options\n): Promise<string> {\n  inputUrl = resolvePath(inputUrl);\n  outputUrl = resolvePath(outputUrl);\n  if (isBrowser || !writer.encodeURLtoURL) {\n    throw new Error();\n  }\n  const outputFilename = await writer.encodeURLtoURL(inputUrl, outputUrl, options);\n  return outputFilename;\n}\n\n/**\n * @todo TODO - this is an unacceptable hack!!!\n */\nfunction getIterator(data) {\n  const dataIterator = [{table: data, start: 0, end: data.length}];\n  return dataIterator;\n}\n\n/**\n * @todo Move to utils\n */\nfunction getTemporaryFilename(filename: string): string {\n  return `/tmp/${filename}`;\n}\n", "import type {Writer, WriterOptions} from '@loaders.gl/loader-utils';\nimport {encode, encodeSync} from './encode';\nimport {writeFile, writeFileSync} from '../fetch/write-file';\n\nexport async function save(data, url, writer: Writer, options: WriterOptions) {\n  const encodedData = await encode(data, writer, options);\n  return await writeFile(url, encodedData);\n}\n\nexport function saveSync(data, url, writer, options) {\n  const encodedData = encodeSync(data, writer, options);\n  return writeFileSync(url, encodedData);\n}\n", "export type MakeStreamOptions = {\n  /** Stream allocates an arrayBuffer. Enables use of a default reader. */\n  autoAllocateChunkSize?: number;\n  /** Total number of chunks in queue before back pressure is applied */\n  highWaterMark?: number;\n};\n\n/**\n * Builds a DOM stream from an iterator\n * This stream is currently used in browsers only,\n * but note that Web stream support is present in Node from Node 16\n * https://nodejs.org/api/webstreams.html#webstreams_web_streams_api\n */\nexport function makeStream<ArrayBuffer>(\n  source: Iterable<ArrayBuffer> | AsyncIterable<ArrayBuffer>,\n  options?: MakeStreamOptions\n): ReadableStream {\n  const iterator = source[Symbol.asyncIterator]\n    ? (source as AsyncIterable<ArrayBuffer>)[Symbol.asyncIterator]()\n    : (source as Iterable<ArrayBuffer>)[Symbol.iterator]();\n\n  return new ReadableStream<Uint8Array>(\n    {\n      // Create a byte stream (enables `Response(stream).arrayBuffer()`)\n      // Only supported on Chrome\n      // See: https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController\n      type: 'bytes',\n\n      async pull(controller) {\n        try {\n          const {done, value} = await iterator.next();\n          if (done) {\n            controller.close();\n          } else {\n            // TODO - ignores controller.desiredSize\n            // @ts-expect-error Unclear why value is not correctly typed\n            controller.enqueue(new Uint8Array(value));\n          }\n        } catch (error) {\n          controller.error(error);\n        }\n      },\n\n      async cancel() {\n        await iterator?.return?.();\n      }\n    },\n    // options: QueingStrategy<Uint8Array>\n    {\n      // This is bytes, not chunks\n      highWaterMark: 2 ** 24,\n      ...options\n    }\n  );\n}\n", "// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nimport {Loader, LoaderWithParser} from '@loaders.gl/loader-utils';\n\n/**\n * Loads any data and returns null (or optionally passes through data unparsed)\n */\nexport const NullWorkerLoader: Loader = {\n  name: 'Null loader',\n  id: 'null',\n  module: 'core',\n  version: VERSION,\n  worker: true,\n  mimeTypes: ['application/x.empty'],\n  extensions: ['null'],\n  tests: [() => false],\n  options: {\n    null: {}\n  }\n};\n\n/**\n * Returns arguments passed to the parse API in a format that can be transfered to a\n * web worker. The `context` parameter is stripped using JSON.stringify & parse.\n */\nfunction parseSync(arrayBuffer, options, context) {\n  if (!options.null.echoParameters) return null;\n  context = context && JSON.parse(JSON.stringify(context));\n  return {arrayBuffer, options, context};\n}\n\n/**\n * Loads any data and returns null (or optionally passes through data unparsed)\n */\nexport const NullLoader: LoaderWithParser = {\n  name: 'Null loader',\n  id: 'null',\n  module: 'core',\n  version: VERSION,\n  mimeTypes: ['application/x.empty'],\n  extensions: ['null'],\n  parse: async (arrayBuffer, options, context) => parseSync(arrayBuffer, options, context),\n  parseSync,\n  parseInBatches: async function* generator(asyncIterator, options, context) {\n    for await (const batch of asyncIterator) {\n      yield parseSync(batch, options, context);\n    }\n  },\n  tests: [() => false],\n  options: {\n    null: {\n      echoParameters: false\n    }\n  }\n};\n", "// Forked from github AnthumChris/fetch-progress-indicators under MIT license\n\n/**\n * Intercepts the Response stream and creates a new Response\n */\nexport default async function fetchProgress(\n  response: Response | Promise<Response>,\n  onProgress: any, // TODO better callback types\n  onDone = () => {},\n  onError = () => {}\n) {\n  response = await response;\n  if (!response.ok) {\n    // ERROR checking needs to be done separately\n    return response;\n  }\n  const body = response.body;\n  if (!body) {\n    // 'ReadableStream not yet supported in this browser.\n    return response;\n  }\n  const contentLength = response.headers.get('content-length') || 0;\n  const totalBytes = contentLength && parseInt(contentLength);\n  if (!(contentLength > 0)) {\n    return response;\n  }\n  // Currently override only implemented in browser\n  if (typeof ReadableStream === 'undefined' || !body.getReader) {\n    return response;\n  }\n\n  // Create a new stream that invisbly wraps original stream\n  const progressStream = new ReadableStream({\n    async start(controller) {\n      const reader = body.getReader();\n      await read(controller, reader, 0, totalBytes, onProgress, onDone, onError);\n    }\n  });\n\n  return new Response(progressStream);\n}\n\n// Forward to original streams controller\n// TODO - this causes a crazy deep \"async stack\"... rewrite as async iterator?\n// eslint-disable-next-line max-params\nasync function read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError) {\n  try {\n    const {done, value} = await reader.read();\n    if (done) {\n      onDone();\n      controller.close();\n      return;\n    }\n    loadedBytes += value.byteLength;\n    const percent = Math.round((loadedBytes / totalBytes) * 100);\n    onProgress(percent, {loadedBytes, totalBytes});\n    controller.enqueue(value);\n    await read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError);\n  } catch (error) {\n    controller.error(error);\n    onError(error);\n  }\n}\n", "import type {FileSystem} from './filesystem';\n\ntype BrowserFileSystemOptions = {\n  fetch?: typeof fetch;\n};\n\n/**\n * FileSystem adapter for a browser FileList.\n * Holds a list of browser 'File' objects.\n */\nexport default class BrowserFileSystem implements FileSystem {\n  private _fetch: typeof fetch;\n  private files: {[filename: string]: File} = {};\n  private lowerCaseFiles: {[filename: string]: File} = {};\n  private usedFiles: {[filename: string]: boolean} = {};\n\n  /**\n   * A FileSystem API wrapper around a list of browser 'File' objects\n   * @param files\n   * @param options\n   */\n  constructor(files: FileList | File[], options?: BrowserFileSystemOptions) {\n    this._fetch = options?.fetch || fetch;\n\n    for (let i = 0; i < files.length; ++i) {\n      const file = files[i];\n      this.files[file.name] = file;\n      this.lowerCaseFiles[file.name.toLowerCase()] = file;\n      this.usedFiles[file.name] = false;\n    }\n\n    this.fetch = this.fetch.bind(this);\n  }\n\n  // implements IFileSystem\n\n  /**\n   * Implementation of fetch against this file system\n   * Delegates to global fetch for http{s}:// or data://\n   */\n  async fetch(path: string, options?: RequestInit): Promise<Response> {\n    // Fallback to handle https:/http:/data: etc fetches\n    if (path.includes('://')) {\n      return this._fetch(path, options);\n    }\n\n    // Local fetches are served from the list of files\n    const file = this.files[path];\n    if (!file) {\n      return new Response(path, {status: 400, statusText: 'NOT FOUND'});\n    }\n\n    const headers = new Headers(options?.headers);\n    const range = headers.get('Range');\n    const bytes = range && /bytes=($1)-($2)/.exec(range);\n\n    if (bytes) {\n      const start = parseInt(bytes[1]);\n      const end = parseInt(bytes[2]);\n      // The trick when reading File objects is to read successive \"slices\" of the File\n      // Per spec https://w3c.github.io/FileAPI/, slicing a File should only update the start and end fields\n      // Actually reading from file should happen in `readAsArrayBuffer` (and as far we can tell it does)\n      const data = await file.slice(start, end).arrayBuffer();\n      const response = new Response(data);\n      Object.defineProperty(response, 'url', {value: path});\n      return response;\n    }\n\n    // return makeResponse()\n    const response = new Response(file);\n    Object.defineProperty(response, 'url', {value: path});\n    return response;\n  }\n\n  /**\n   * List filenames in this filesystem\n   * @param dirname\n   * @returns\n   */\n  async readdir(dirname?: string): Promise<string[]> {\n    const files: string[] = [];\n    for (const path in this.files) {\n      files.push(path);\n    }\n    // TODO filter by dirname\n    return files;\n  }\n\n  /**\n   * Return information (size) about files in this file system\n   */\n  async stat(path: string, options?: object): Promise<{size: number}> {\n    const file = this.files[path];\n    if (!file) {\n      throw new Error(path);\n    }\n    return {size: file.size};\n  }\n\n  /**\n   * Just removes the file from the list\n   */\n  async unlink(path: string): Promise<void> {\n    delete this.files[path];\n    delete this.lowerCaseFiles[path];\n    this.usedFiles[path] = true;\n  }\n\n  // implements IRandomAccessFileSystem\n\n  // RANDOM ACCESS\n  async open(pathname: string, flags, mode?): Promise<any> {\n    return this.files[pathname];\n  }\n\n  /**\n   * Read a range into a buffer\n   * @todo - handle position memory\n   * @param buffer is the buffer that the data (read from the fd) will be written to.\n   * @param offset is the offset in the buffer to start writing at.\n   * @param length is an integer specifying the number of bytes to read.\n   * @param position is an argument specifying where to begin reading from in the file. If position is null, data will be read from the current file position, and the file position will be updated. If position is an integer, the file position will remain unchanged.\n   */\n  async read(\n    fd: any,\n    buffer: ArrayBuffer,\n    offset: number = 0,\n    length: number = buffer.byteLength,\n    position: number | null = null\n  ): Promise<{bytesRead: number; buffer: ArrayBuffer}> {\n    const file = fd as File;\n    const startPosition = 0; // position\n    const arrayBuffer = await file.slice(startPosition, startPosition + length).arrayBuffer();\n    // copy into target buffer\n    return {bytesRead: length, buffer: arrayBuffer};\n  }\n\n  async close(fd: number): Promise<void> {\n    // NO OP\n  }\n\n  // fstat(fd: number): Promise<object>; // Stat\n\n  // PRIVATE\n\n  // Supports case independent paths, and file usage tracking\n  _getFile(path, used) {\n    // Prefer case match, but fall back to case indepent.\n    const file = this.files[path] || this.lowerCaseFiles[path];\n    if (file && used) {\n      this.usedFiles[path] = true;\n    }\n    return file;\n  }\n}\n"],
  "mappings": "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",
  "names": ["isBoolean", "x", "isFunction", "isObject", "isPureObject", "constructor", "isPromise", "then", "isIterable", "Symbol", "iterator", "isAsyncIterable", "asyncIterator", "isIterator", "next", "isResponse", "Response", "arrayBuffer", "text", "json", "isBlob", "x", "Blob", "isBuffer", "isWritableDOMStream", "isObject", "isFunction", "abort", "getWriter", "isReadableDOMStream", "ReadableStream", "tee", "cancel", "getReader", "isWritableNodeStream", "end", "write", "isBoolean", "writable", "isReadableNodeStream", "read", "pipe", "readable", "isReadableStream", "isWritableStream", "DATA_URL_PATTERN", "MIME_TYPE_PATTERN", "parseMIMEType", "mimeString", "matches", "exec", "parseMIMETypeFromURL", "url", "QUERY_STRING_PATTERN", "getResourceUrlAndType", "resource", "isResponse", "url", "stripQueryString", "contentTypeHeader", "headers", "get", "type", "parseMIMEType", "parseMIMETypeFromURL", "isBlob", "name", "getResourceContentLength", "size", "length", "ArrayBuffer", "byteLength", "isView", "replace", "makeResponse", "resource", "isResponse", "headers", "contentLength", "getResourceContentLength", "String", "url", "type", "getResourceUrlAndType", "initialDataUrl", "getInitialDataUrl", "TextEncoder", "encode", "response", "Response", "Object", "defineProperty", "value", "checkResponse", "ok", "message", "getResponseError", "Error", "getResponseError", "response", "message", "url", "status", "contentType", "headers", "get", "text", "statusText", "includes", "length", "slice", "error", "getInitialDataUrl", "resource", "INITIAL_DATA_LENGTH", "Blob", "blobSlice", "Promise", "resolve", "reader", "FileReader", "onload", "event", "target", "result", "readAsDataURL", "ArrayBuffer", "base64", "arrayBufferToBase64", "buffer", "binary", "bytes", "Uint8Array", "i", "byteLength", "String", "fromCharCode", "btoa", "fetchFile", "url", "options", "resolvePath", "fetchOptions", "fetch", "makeResponse", "readArrayBuffer", "file", "start", "length", "fs", "_readToArrayBuffer", "Blob", "slice", "readBlob", "blob", "Promise", "resolve", "reject", "fileReader", "FileReader", "onload", "event", "target", "result", "onerror", "error", "readAsArrayBuffer", "readFileSync", "url", "options", "resolvePath", "isBrowser", "buffer", "fs", "toArrayBuffer", "nothrow", "assert", "writeFile", "filePath", "arrayBufferOrString", "options", "resolvePath", "isBrowser", "fs", "toBuffer", "flag", "assert", "writeFileSync", "mockUserAgent", "window", "process", "type", "versions", "Boolean", "realUserAgent", "navigator", "userAgent", "indexOf", "isBrowser", "isNode", "process", "String", "browser", "isElectron", "globals", "self", "window", "global", "document", "process", "self_", "globals", "self", "window", "global", "window_", "document_", "document", "process_", "process", "VERSION", "__VERSION__", "isBrowser", "checkIfBrowser", "window", "globalThis", "mockUserAgent", "isBrowser", "isElectron", "navigator_", "navigator", "userAgent", "indexOf", "isMSIE", "isTrident", "window", "chrome", "safari", "mozInnerScreenX", "getStorage", "type", "storage", "window", "x", "setItem", "removeItem", "e", "LocalStorage", "constructor", "id", "defaultConfig", "config", "_loadConfiguration", "getConfiguration", "setConfiguration", "configuration", "Object", "assign", "serialized", "JSON", "stringify", "serializedConfiguration", "getItem", "parse", "formatTime", "ms", "formatted", "toFixed", "leftPad", "string", "length", "padLength", "Math", "max", "repeat", "formatImage", "image", "message", "scale", "maxWidth", "imageUrl", "src", "replace", "width", "Math", "min", "height", "style", "floor", "join", "COLOR", "getColor", "color", "toUpperCase", "WHITE", "addColor", "string", "background", "isBrowser", "autobind", "obj", "predefined", "proto", "Object", "getPrototypeOf", "propNames", "getOwnPropertyNames", "key", "find", "name", "bind", "assert", "condition", "message", "Error", "getHiResTimestamp", "timestamp", "isBrowser", "window", "performance", "now", "process", "timeParts", "hrtime", "Date", "originalConsole", "debug", "isBrowser", "console", "log", "info", "warn", "error", "DEFAULT_SETTINGS", "enabled", "level", "noop", "cache", "ONCE", "once", "Log", "constructor", "id", "VERSION", "getHiResTimestamp", "userData", "_storage", "LocalStorage", "timeStamp", "autobind", "Object", "seal", "newLevel", "setLevel", "getLevel", "isEnabled", "config", "getTotal", "Number", "_startTs", "toPrecision", "getDelta", "_deltaTs", "priority", "newPriority", "getPriority", "enable", "setConfiguration", "get", "setting", "set", "value", "settings", "table", "assert", "condition", "message", "_getLogFunction", "arguments", "deprecated", "oldUsage", "newUsage", "removed", "probe", "logLevel", "time", "args", "columns", "tag", "getTableHeader", "image", "scale", "_shouldLog", "logImageInBrowser", "logImageInNode", "timeEnd", "group", "opts", "collapsed", "options", "normalizeArguments", "method", "groupCollapsed", "assign", "groupEnd", "withGroup", "func", "trace", "normalizeLogLevel", "total", "delta", "decorateMessage", "bind", "resolvedLevel", "isFinite", "Array", "from", "length", "shift", "undefined", "unshift", "messageType", "leftPad", "formatTime", "addColor", "color", "background", "img", "Image", "onload", "formatImage", "src", "element", "nodeName", "toLowerCase", "toDataURL", "key", "title", "globalThis", "probe", "Log", "id", "probeLog", "Log", "id", "NullLog", "log", "info", "warn", "error", "ConsoleLog", "constructor", "console", "args", "bind", "DEFAULT_LOADER_OPTIONS", "fetch", "mimeType", "undefined", "nothrow", "log", "ConsoleLog", "CDN", "worker", "maxConcurrency", "maxMobileConcurrency", "reuseWorkers", "isBrowser", "_nodeWorkers", "_workerType", "limit", "_limitMB", "batchSize", "batchDebounceMs", "metadata", "transforms", "REMOVED_LOADER_OPTIONS", "throws", "dataType", "uri", "method", "headers", "body", "mode", "credentials", "cache", "redirect", "referrer", "referrerPolicy", "integrity", "keepalive", "signal", "getGlobalLoaderState", "globalThis", "loaders", "_state", "getGlobalLoaderOptions", "state", "globalOptions", "DEFAULT_LOADER_OPTIONS", "setGlobalOptions", "options", "normalizeOptionsInternal", "normalizeOptions", "loader", "url", "Array", "isArray", "validateOptions", "getFetchFunction", "context", "fetchOptions", "fetch", "isObject", "fetchFile", "validateOptionsObject", "REMOVED_LOADER_OPTIONS", "idOptions", "id", "loaderOptions", "deprecatedOptions", "defaultOptions", "loaderName", "prefix", "key", "isSubOptions", "isBaseUriOption", "isWorkerUrlOption", "probeLog", "warn", "suggestion", "findSimilarOption", "optionKey", "lowerCaseOptionKey", "toLowerCase", "bestSuggestion", "lowerCaseKey", "isPartialMatch", "startsWith", "loaderDefaultOptions", "mergedOptions", "addUrlOptions", "log", "NullLog", "mergeNestedFields", "value", "isPureObject", "baseUri", "isLoaderObject", "loader", "Array", "isArray", "hasExtensions", "extensions", "normalizeLoader", "assert", "options", "parseTextSync", "parseText", "text", "binary", "getGlobalLoaderRegistry", "state", "getGlobalLoaderState", "loaderRegistry", "registerLoaders", "loaders", "Array", "isArray", "loader", "normalizedLoader", "normalizeLoader", "find", "registeredLoader", "unshift", "getRegisteredLoaders", "_unregisterLoaders", "log", "Log", "id", "EXT_PATTERN", "selectLoader", "data", "loaders", "options", "context", "validHTTPResponse", "loader", "selectLoaderSync", "nothrow", "isBlob", "slice", "arrayBuffer", "Error", "getNoValidLoaderMessage", "Array", "isArray", "normalizeLoader", "candidateLoaders", "concat", "ignoreRegisteredLoaders", "push", "getRegisteredLoaders", "normalizeLoaders", "selectLoaderInternal", "url", "type", "getResourceUrlAndType", "testUrl", "reason", "mimeType", "findLoaderByMIMEType", "findLoaderByUrl", "findLoaderByInitialBytes", "getFirstCharacters", "fallbackMimeType", "log", "name", "Response", "status", "message", "path", "filename", "firstCharacters", "match", "exec", "extension", "findLoaderByExtension", "toLowerCase", "loaderExtension", "extensions", "mimeTypes", "includes", "id", "testDataAgainstText", "ArrayBuffer", "isView", "testDataAgainstBinary", "buffer", "byteOffset", "testText", "tests", "some", "test", "startsWith", "testBinary", "compareArrayBuffers", "byteLength", "magic", "getMagicString", "length", "dataView", "DataView", "i", "String", "fromCharCode", "getUint8", "DEFAULT_CHUNK_SIZE", "makeStringIterator", "string", "options", "chunkSize", "offset", "textEncoder", "TextEncoder", "length", "chunkLength", "Math", "min", "chunk", "slice", "encode", "DEFAULT_CHUNK_SIZE", "makeArrayBufferIterator", "arrayBuffer", "options", "chunkSize", "byteOffset", "byteLength", "chunkByteLength", "Math", "min", "chunk", "ArrayBuffer", "sourceArray", "Uint8Array", "chunkArray", "set", "DEFAULT_CHUNK_SIZE", "makeBlobIterator", "blob", "options", "chunkSize", "offset", "size", "end", "chunk", "slice", "arrayBuffer", "makeStreamIterator", "stream", "options", "isBrowser", "makeBrowserStreamIterator", "makeNodeStreamIterator", "reader", "getReader", "nextBatchPromise", "currentBatchPromise", "read", "_streamReadAhead", "done", "value", "toArrayBuffer", "error", "releaseLock", "chunk", "makeIterator", "data", "options", "makeStringIterator", "ArrayBuffer", "makeArrayBufferIterator", "isBlob", "makeBlobIterator", "isReadableStream", "makeStreamIterator", "isResponse", "response", "body", "Error", "ERR_DATA", "getArrayBufferOrStringFromDataSync", "data", "loader", "options", "text", "isBuffer", "buffer", "ArrayBuffer", "arrayBuffer", "binary", "textDecoder", "TextDecoder", "decode", "isView", "byteLength", "length", "byteOffset", "slice", "Error", "getArrayBufferOrStringFromData", "isArrayBuffer", "isBlob", "makeResponse", "isResponse", "response", "checkResponse", "isReadableStream", "makeIterator", "isIterable", "isAsyncIterable", "concatenateArrayBuffersAsync", "getAsyncIterableFromData", "isIterator", "body", "Symbol", "asyncIterator", "getIterableFromData", "getIterableFromData", "data", "ArrayBuffer", "isView", "oneChunk", "buffer", "isIterator", "isIterable", "Symbol", "iterator", "Error", "ERR_DATA", "getLoaderContext", "context", "options", "previousContext", "resolvedContext", "fetch", "getFetchFunction", "Array", "isArray", "loaders", "getLoadersFromContext", "candidateLoaders", "contextLoaders", "length", "parse", "data", "loaders", "options", "context", "assert", "Array", "isArray", "isLoaderObject", "undefined", "url", "getResourceUrlAndType", "typedLoaders", "candidateLoaders", "getLoadersFromContext", "loader", "selectLoader", "normalizeOptions", "getLoaderContext", "parseWithLoader", "validateWorkerVersion", "isResponse", "response", "ok", "redirected", "status", "statusText", "type", "headers", "Object", "fromEntries", "entries", "getArrayBufferOrStringFromData", "parseTextSync", "dataType", "canParseWithWorker", "parseWithWorker", "parseText", "parseSync", "Error", "id", "parseSync", "data", "loaders", "options", "context", "assert", "Array", "isArray", "isLoaderObject", "undefined", "typedLoaders", "candidateLoaders", "getLoadersFromContext", "loader", "selectLoaderSync", "normalizeOptions", "url", "getResourceUrlAndType", "parse", "Error", "getLoaderContext", "parseWithLoaderSync", "getArrayBufferOrStringFromDataSync", "parseTextSync", "ArrayBuffer", "name", "parseInBatches", "data", "loaders", "options", "context", "assert", "Array", "isArray", "isLoaderObject", "undefined", "url", "getResourceUrlAndType", "loader", "selectLoader", "normalizeOptions", "getLoaderContext", "parse", "parseWithLoaderInBatches", "outputIterator", "parseToOutputIterator", "metadata", "metadataBatch", "batchType", "_loader", "_context", "bytesUsed", "makeMetadataBatchIterator", "iterator", "inputIterator", "getAsyncIterableFromData", "transformedIterator", "applyInputTransforms", "transforms", "parseChunkInBatches", "arrayBuffer", "concatenateArrayBuffersAsync", "parsedData", "mimeType", "mimeTypes", "batch", "shape", "length", "iteratorChain", "transformBatches", "load", "url", "loaders", "options", "context", "Array", "isArray", "isLoaderObject", "undefined", "fetch", "getFetchFunction", "data", "isBlob", "parse", "loadInBatches", "files", "loaders", "options", "context", "Array", "isArray", "isLoaderObject", "undefined", "fetch", "getFetchFunction", "loadOneFileInBatches", "promises", "map", "file", "url", "response", "parseInBatches", "encode", "data", "writer", "options", "globalOptions", "getLoaderOptions", "canEncodeWithWorker", "processOnWorker", "encodeSync", "encodeText", "TextEncoder", "encodeInBatches", "batches", "chunks", "batch", "push", "concatenateArrayBuffers", "isBrowser", "encodeURLtoURL", "tmpInputFilename", "getTemporaryFilename", "writeFile", "tmpOutputFilename", "outputFilename", "response", "fetchFile", "arrayBuffer", "Error", "text", "TextDecoder", "decode", "dataIterator", "getIterator", "inputUrl", "outputUrl", "resolvePath", "table", "start", "end", "length", "filename", "save", "data", "url", "writer", "options", "encodedData", "encode", "writeFile", "saveSync", "encodeSync", "writeFileSync", "makeStream", "source", "options", "iterator", "Symbol", "asyncIterator", "ReadableStream", "type", "pull", "controller", "done", "value", "next", "close", "enqueue", "Uint8Array", "error", "cancel", "return", "highWaterMark", "VERSION", "NullWorkerLoader", "name", "id", "module", "version", "worker", "mimeTypes", "extensions", "tests", "options", "null", "parseSync", "arrayBuffer", "context", "echoParameters", "JSON", "parse", "stringify", "NullLoader", "parseInBatches", "generator", "asyncIterator", "batch", "response", "onProgress", "onDone", "onError", "ok", "body", "contentLength", "headers", "get", "totalBytes", "parseInt", "ReadableStream", "getReader", "progressStream", "start", "controller", "reader", "read", "Response", "loadedBytes", "done", "value", "close", "byteLength", "percent", "Math", "round", "enqueue", "error", "BrowserFileSystem", "constructor", "files", "options", "_fetch", "fetch", "i", "length", "file", "name", "lowerCaseFiles", "toLowerCase", "usedFiles", "bind", "path", "includes", "Response", "status", "statusText", "headers", "Headers", "range", "get", "bytes", "exec", "start", "parseInt", "end", "data", "slice", "arrayBuffer", "response", "Object", "defineProperty", "value", "readdir", "dirname", "push", "stat", "Error", "size", "unlink", "open", "pathname", "flags", "mode", "read", "fd", "buffer", "offset", "byteLength", "position", "startPosition", "bytesRead", "close", "_getFile", "used"]
}
